eck = {

    (0,0): ((5,2),(1,6)),
    (0,2): ((1,8),(4,8)),
    (0,6): ((3,0),(5,8)),
    (0,8): ((4,2),(3,2)),

    (1,0): ((5,0),(2,6)),
    (1,2): ((2,8),(4,6)),
    (1,6): ((0,0),(5,2)),
    (1,8): ((4,8),(0,2)),
    
    (2,0): ((5,6),(3,6)),
    (2,2): ((3,8),(4,0)),
    (2,6): ((1,0),(5,0)),
    (2,8): ((4,6),(1,2)),
    
    (3,0): ((5,8),(0,6)),
    (3,2): ((0,8),(4,2)),
    (3,6): ((2,0),(5,6)),
    (3,8): ((4,0),(2,2)),

    (4,0): ((2,2),(3,8)),
    (4,2): ((3,2),(0,8)),
    (4,6): ((1,2),(2,8)),
    (4,8): ((0,2),(1,8)),

    (5,0): ((2,6),(1,0)),
    (5,2): ((1,6),(0,0)),
    (5,6): ((3,6),(2,0)),
    (5,8): ((3,0),(0,6)),
}
moves_eck0 = {
    ((0,0),(5,2),(1,6)): [],
    ((0,2),(1,8),(4,8)): ['L','B','Lr','Rr','Br','R'],
    ((0,6),(3,0),(5,8)): ['U','R','F','R','R','Fr','Ur','Rr'],
    ((0,8),(4,2),(3,2)): ['U','B','B','Ur','Rr','Br','R'],

    ((1,0),(5,0),(2,6)): ['D','B','Dr'],
    ((1,2),(2,8),(4,6)): ['B','Rr','Br','R'],
    ((1,6),(0,0),(5,2)): ['Rr','B','R','D','B','Dr'],
    ((1,8),(4,8),(0,2)): ['L','Br','Lr','B','Rr','Br','R'],
    
    ((2,0),(5,6),(3,6)): ['Br','Rr','Ur','B','B','U','R'],
    ((2,2),(3,8),(4,0)): ['Br','Br','Rr','Ur','B','B','U','R'],
    ((2,6),(1,0),(5,0)): ['Rr','Ur','B','B','U','R'],
    ((2,8),(4,6),(1,2)): ['B','Rr','Ur','B','B','U','R'],
    
    ((3,0),(5,8),(0,6)): ['U','Rr','Ur','Rr','Dr','R','R','D'],
    ((3,2),(0,8),(4,2)): ['Lr','B','L','B','B','D','B','Dr'],
    ((3,6),(2,0),(5,6)): ['Br','Rr','Br','R'],
    ((3,8),(4,0),(2,2)): ['B','B','D','B','Dr'],

    ((4,0),(2,2),(3,8)): ['B','B','Rr','Br','R'],
    ((4,2),(3,2),(0,8)): ['U','Br','Ur','B','B','Rr','Dr','R'],
    ((4,6),(1,2),(2,8)): ['B','D','B','Dr'],
    ((4,8),(0,2),(1,8)): ['L','B','Lr','D','B','Dr'],

    ((5,0),(2,6),(1,0)): ['Rr','Dr','R'],
    ((5,2),(1,6),(0,0)): ['Rr','Br','R','B','Rr','Br','R'],
    ((5,6),(3,6),(2,0)): ['Br','D','B','Dr'],
    ((5,8),(3,0),(0,6)): ['R','B','Rr','Rr','B','B','R'],
}
moves_eck1 = {
    
    ((0,2),(1,8),(4,8)): [],
    ((0,6),(3,0),(5,8)): ['R','B','B','Rr','Dr','Br','D'],
    ((0,8),(4,2),(3,2)): ['Lr','Br','L','B','B','L','B','Lr'],

    ((1,0),(5,0),(2,6)): ['Br','L','B','Lr'],
    ((1,2),(2,8),(4,6)): ['Dr','Br','D'],
    ((1,8),(4,8),(0,2)): ['Dr','B','B','D','B','B','Dr','Br','D'],
    
    ((2,0),(5,6),(3,6)): ['B','B','Dr','Rr','B','B','R','D'],
    ((2,2),(3,8),(4,0)): ['B','Dr','Rr','B','B','R','D'],
    ((2,6),(1,0),(5,0)): ['Br','Dr','Rr','B','B','R','D'],
    ((2,8),(4,6),(1,2)): ['Dr','Rr','B','B','R','D'],
    
    ((3,0),(5,8),(0,6)): ['R','Br','Rr','B','B','Dr','Br','D'],
    ((3,2),(0,8),(4,2)): ['Lr','B','L','B','L','B','Lr'],
    ((3,6),(2,0),(5,6)): ['B','B','Dr','Br','D'],
    ((3,8),(4,0),(2,2)): ['B','L','B','Lr'],

    ((4,0),(2,2),(3,8)): ['B','Dr','Br','D'],
    ((4,2),(3,2),(0,8)): ['U','Br','Ur','B','Dr','Br','D'],
    ((4,6),(1,2),(2,8)): ['L','B','Lr'],
    ((4,8),(0,2),(1,8)): ['L','B','Lr','Br','L','B','Lr'],

    ((5,0),(2,6),(1,0)): ['Br','Dr','Br','D'],
    ((5,6),(3,6),(2,0)): ['B','B','L','B','Lr'],
    ((5,8),(3,0),(0,6)): ['R','B','B','Rr','L','B','Lr'],
}
moves_eck2 = {
    
    ((0,6),(3,0),(5,8)): ['R','B','Rr','Lr','Br','L'],
    ((0,8),(4,2),(3,2)): [],

    ((1,0),(5,0),(2,6)): ['B','B','U','B','Ur'],
    ((1,2),(2,8),(4,6)): ['Br','Lr','Br','L'],
    
    ((2,0),(5,6),(3,6)): ['B','Lr','Dr','B','B','D','L'],
    ((2,2),(3,8),(4,0)): ['Lr','Dr','B','B','D','L'],
    ((2,6),(1,0),(5,0)): ['B','B','Lr','Dr','B','B','D','L'],
    ((2,8),(4,6),(1,2)): ['Br','Lr','Dr','B','B','D','L'],
    
    ((3,0),(5,8),(0,6)): ['Ur','Br','U','B','B','Lr','Br','L'],
    ((3,2),(0,8),(4,2)): ['Lr','B','L','U','B','Ur'],
    ((3,6),(2,0),(5,6)): ['B','Lr','Br','L'],
    ((3,8),(4,0),(2,2)): ['U','B','Ur'],

    ((4,0),(2,2),(3,8)): ['Lr','Br','L'],
    ((4,2),(3,2),(0,8)): ['Lr','Br','L','B','Lr','Br','L'],
    ((4,6),(1,2),(2,8)): ['Br','U','B','Ur'],

    ((5,0),(2,6),(1,0)): ['B','B','Lr','Br','L'],
    ((5,6),(3,6),(2,0)): ['B','Lr','Br','L'],
    ((5,8),(3,0),(0,6)): ['R','B','Rr','U','B','Ur'],
}
moves_eck3 = {
    
    ((0,8),(4,2),(3,2)): [],

    ((1,0),(5,0),(2,6)): ['B','R','B','Rr'],
    ((1,2),(2,8),(4,6)): ['B','B','R','B','Rr'],
    
    ((2,0),(5,6),(3,6)): ['R','D','B','B','Dr','Rr'],
    ((2,2),(3,8),(4,0)): ['Br','R','D','B','B','Dr','Rr'],
    ((2,6),(1,0),(5,0)): ['B','R','D','B','B','Dr','Rr'],
    ((2,8),(4,6),(1,2)): ['B','B','R','D','B','B','Dr','Rr'],
    
    ((3,2),(0,8),(4,2)): ['R','Br','Rr','Ur','Br','U'],
    ((3,6),(2,0),(5,6)): ['Ur','Br','U'],
    ((3,8),(4,0),(2,2)): ['Br','R','B','Rr'],

    ((4,0),(2,2),(3,8)): ['Br','Ur','Br','U'],
    ((4,6),(1,2),(2,8)): ['B','B','Ur','Br','U'],

    ((5,0),(2,6),(1,0)): ['B','Ur','Br','U'],
    ((5,6),(3,6),(2,0)): ['R','B','Rr'],
}

kanten_f={
    
    (1,1):(2,7),
    (1,3):(5,1),
    (1,5):(4,7),

    (2,1):(3,7),
    (2,3):(5,3),
    (2,5):(4,3),
    (2,7):(1,1),

    (3,3):(5,7),
    (3,5):(4,1),
    (3,7):(2,1),

    (4,1):(3,5),
    (4,3):(2,5),
    (4,7):(1,5),
    
    (5,1):(1,3),
    (5,3):(2,3),
    (5,7):(3,3),
}
moves_kant0 = {
    ((1,1),(2,7)): ['Br','Rr','B','R','B','D','Br','Dr'],
    ((1,3),(5,1)): [],
    ((1,5),(4,7)): ['L','B','Lr','Br','Dr','Br','D','D','B','Dr','Br','Rr','Br','R'],

    ((2,1),(3,7)): ['D','Br','Dr','Br','Rr','Br','R'],
    ((2,3),(5,3)): ['B','D','Br','Dr','Br','Rr','Br','R'],
    ((2,5),(4,3)): ['Br','D','Br','Dr','Br','Rr','Br','R'],
    ((2,7),(1,1)): ['B','B','D','Br','DR','Br','Rr','Br','R'],

    ((3,3),(5,7)): ['R','R','B','B','R','R','B','B','R','R'],
    ((3,5),(4,1)): ['Lr','Br','L','B','U','B','Ur','B','B','D','Br','Dr','Br','Rr','Br','R'],
    ((3,7),(2,1)): ['B','Rr','B','R','B','D','Br','Dr'],

    ((4,1),(3,5)): ['Lr','Br','L','B','U','B','Ur','Br','Rr','B','R','B','D','Br','Dr'],
    ((4,3),(2,5)): ['Rr','B','R','B','D','Br','Dr'],
    ((4,7),(1,5)): ['Dr','Br','D','B','L','B','Lr','B','D','Br','Dr','Br','Rr','Br','R'],
    
    ((5,1),(1,3)): ['Rr','Br','R','B','D','B','Dr','B','Rr','B','R','B','D','Br','Dr'],
    ((5,3),(2,3)): ['B','B','Rr','B','R','B','D','Br','Dr'],
    ((5,7),(3,3)): ['R','B','Rr','Br','Ur','Br','U','B','B','D','Br','DR','Br','Rr','Br','R'],
}
moves_kant1 = {
    ((1,1),(2,7)): ['B','B','Dr','B','D','B','L','Br','Lr'],
    ((1,5),(4,7)): ['L','B','Lr','Br','Dr','Br','D','Br','L','Br','Lr','Br','Dr','B','D'],

    ((2,1),(3,7)): ['Br','L','Br','Lr','Br','Dr','B','D'],
    ((2,3),(5,3)): ['L','Br','Lr','Br','Dr','B','D'],
    ((2,5),(4,3)): ['B','B','L','Br','Lr','Br','Dr','B','D'],
    ((2,7),(1,1)): ['B','L','Br','Lr','Br','Dr','B','D'],

    ((3,3),(5,7)): ['R','B','Rr','Br','Ur','Br','U','B','L','Br','Lr','Br','Dr','B','D'],
    ((3,5),(4,1)): ['Lr','Br','L','B','U','B','Ur','B','L','Br','Lr','Br','Dr','B','D'],
    ((3,7),(2,1)): ['Dr','B','D','B','L','Br','Lr'],

    ((4,1),(3,5)): ['U','B','Ur','Br','Lr','Br','L','L','Br','Lr','Br','Dr','B','D'],
    ((4,3),(2,5)): ['Br','Dr','B','D','B','L','Br','Lr'],
    ((4,7),(1,5)): [],
    
    ((5,3),(2,3)): ['B','Dr','B','D','B','L','Br','Lr'],
    ((5,7),(3,3)): ['Rr','B','R','Br','Ur','Br','U','B','B','Dr','B','D','B','L','Br','Lr'],
}
moves_kant2 = {
    ((1,1),(2,7)): ['U','Br','Ur','Br','Lr','B','L'],

    ((2,1),(3,7)): ['Br','Lr','B','L','B','U','Br','Ur'],
    ((2,3),(5,3)): ['Lr','B','L','B','U','Br','Ur'],
    ((2,5),(4,3)): ['B','B','Lr','B','L','B','U','Br','Ur'],
    ((2,7),(1,1)): ['B','Lr','B','L','B','U','Br','Ur'],

    ((3,3),(5,7)): ['U','U','B','B','U','U','B','B','U','U'],
    ((3,5),(4,1)): ['Lr','Br','L','B','U','B','Ur','B','Lr','B','L','B','U','Br','Ur'],
    ((3,7),(2,1)): ['B','B','U','Br','Ur','Br','Lr','B','L'],

    ((4,1),(3,5)): [],
    ((4,3),(2,5)): ['B','U','Br','Ur','Br','Lr','B','L'],
    
    ((5,3),(2,3)): ['Br','U','Br','Ur','Br','Lr','B','L'],
    ((5,7),(3,3)): ['R','B','Rr','Br','Ur','Br','U','U','Br','Ur','Br','Lr','B','L'],
}
moves_kant3 = {
    ((1,1),(2,7)): ['Ur','B','U','B','R','Br','Rr'],
    
    ((2,1),(3,7)): ['B','R','Br','Rr','Br','Ur','B','U'],
    ((2,3),(5,3)): ['B','B','R','Br','Rr','Br','Ur','B','U'],
    ((2,5),(4,3)): ['R','Br','Rr','Br','Ur','B','U'],
    ((2,7),(1,1)): ['Br','R','Br','Rr','Br','Ur','B','U'],

    ((3,3),(5,7)): ['R','B','Rr','Br','Ur','Br','U','Br','R','Br','Rr','Br','Ur','B','U'],
    ((3,7),(2,1)): ['B','B','Ur','B','U','B','R','Br','Rr'],

    ((4,3),(2,5)): ['B','Ur','B','U','B','R','Br','Rr'],
    
    ((5,3),(2,3)): ['Br','Ur','B','U','B','R','Br','Rr'],
    ((5,7),(3,3)): [],
}
verbotene={(1,7),(3,1),(4,5),(5,5)}
OLL_moves={
    (('X','X','X'),('X','X',1),('X','X',1),('X','X',1),('X',1,'X',1,1,1,1,1,'X')):('R','B','B','Rr','Br','R','Br','Rr') ,
    ((1,'X','X'),(1,'X','X'),(1,'X','X'),('X','X','X'),('X',1,1,1,1,1,'X',1,'X')):('R','B','Rr','B','R','B','B','Rr'),
    ((1,'X',1),('X','X','X'),(1,'X',1),('X','X','X'),('X',1,'X',1,1,1,'X',1,'X')):('R','B','Rr','Br','R','B','Rr','Br','R','Br','Rr'),
    (('X','X',1),('X','X','X'),(1,'X','X'),(1,'X',1),('X',1,'X',1,1,1,'X',1,'X')):('R','B','B','R','R','Br','R','R','B','B','R'),
    ((1,'X','X'),('X','X','X'),('X','X',1),('X','X','X'),(1,1,'X',1,1,1,1,1,'X')):('L','U','Rr','Ur','Lr','U','R','Ur'),
    (('X','X','X'),(1,'X','X'),('X','X',1),('X','X','X'),(1,1,'X',1,1,1,'X',1,1)):('Rr','U','R','Dr','Rr','Ur','R','D'),
    (('X','X','X'),('X','X','X'),(1,'X',1),('X','X','X'),('X',1,'X',1,1,1,1,1,1)):('R','R','F','Rr','B','B','R','Fr','Rr','B','B','Rr'),
    #T-shapes
    ((1,1,'X'),('X','X','X'),('X',1,1),('X','X','X'),(1,'X','X',1,1,1,1,'X','X')):('R','B','Rr','Br','Rr','U','R','Ur'),
    (('X',1,'X'),('X','X','X'),('X',1,'X'),(1,'X',1),(1,'X','X',1,1,1,1,'X','X')):('U','R','B','Rr','Br','Ur'),
    #Squares
    ((1,1,'X'),(1,'X','X'),('X','X','X'),(1,1,'X'),(1,1,'X',1,1,'X','X','X','X')):('Lr','D','D','R','D','Rr','D','L'),
    (('X','X','X'),('X','X',1),('X',1,1),('X',1,1),('X','X','X',1,1,'X',1,1,'X')):('L','D','D','Rr','Dr','R','Dr','Lr'),
    #C-shapes
    (('X',1,'X'),(1,'X','X'),('X',1,'X'),('X','X',1),(1,'X',1,1,1,1,'X','X','X')):('R','B','R','R','Br','Rr','U','R','B','R','Br','Ur'),
    (('X','X','X'),(1,1,1),('X','X','X'),('X',1,'X'),('X',1,1,'X',1,'X','X',1,1)):('Rr','Br','Rr','U','R','Ur','Br','R'),
    #W-shapes
    (('X',1,'X'),(1,1,'X'),('X','X',1),('X','X','X'),(1,1,'X','X',1,1,'X','X',1)):('B','B','R','B','Rr','Ur','R','B','Rr','Br','Rr','U','R','Br','Rr','U','R',''),
    ((1,'X','X'),('X',1,1),('X',1,'X'),('X','X','X'),('X','X',1,'X',1,1,1,1,'X')):('R','B','Rr','B','R','Br','Rr','Br','Rr','U','R','Ur'),
    #CCEF
    (('X','X','X'),('X',1,'X'),('X',1,'X'),('X','X','X'),(1,'X',1,'X',1,1,1,1,1)):('L','U','Rr','Ur','R','Lr','B','R','Br','Rr'),
    (('X',1,'X'),('X','X','X'),('X',1,'X'),('X','X','X'),(1,'X',1,1,1,1,1,'X',1)):('R','B','Rr','Br','Rr','L','U','R','Ur','Lr'),
    #P-shapes
    ((1,'X','X'),('X','X','X'),('X',1,1),('X',1,'X'),(1,'X','X',1,1,'X',1,1,'X')):('Rr','Br','U','B','R','Br','Rr','Ur','R'),
    ((1,1,'X'),('X','X','X'),('X','X',1),('X',1,'X'),(1,1,'X',1,1,'X',1,'X','X')):('R','B','Dr','Br','Rr','B','R','D','Rr'),
    (('X',1,'X'),(1,1,1),('X','X','X'),('X','X','X'),('X',1,1,'X',1,1,'X','X',1)):('Dr','Br','Rr','B','R','D'),
    (('X',1,'X'),('X','X','X'),('X','X','X'),(1,1,1),(1,1,'X',1,1,'X',1,'X','X')):('D','B','L','Br','Lr','Br','Dr'),
    #i-shapes
    (('X',1,1),('X','X','X'),(1,1,'X'),(1,'X',1),('X','X','X',1,1,1,'X','X','X')):('D','B','L','Br','Lr','B','L','B','Lr','Dr'),
    (('X',1,'X'),(1,'X',1),('X',1,'X'),(1,'X',1),('X','X','X',1,1,1,'X','X','X')):('Lr','Br','L','Br','Rr','B','R','Br','Rr','B','R','Lr','Br','L'),
    ((1,'X','X'),(1,1,1),('X','X',1),('X',1,'X'),('X',1,'X','X',1,'X','X',1,'X')):('R','B','Rr','B','R','Br','D','Br','Dr','Rr'),
    (('X','X','X'),(1,1,1),('X','X','X'),(1,1,1),('X',1,'X','X',1,'X','X',1,'X')):('Dr','R','D','B','D','Br','D','D','Rr','D','D','Br','Dr','B','D','B','Dr'),
    #fish shapes
    (('X','X',1),('X',1,'X'),('X',1,1),('X','X',1),(1,'X','X','X',1,1,'X',1,'X')):('R','B','Rr','Br','Rr','U','R','R','B','Rr','Br','Ur'),
    ((1,1,'X'),('X',1,'X'),(1,'X','X'),(1,'X','X'),('X',1,'X','X',1,1,1,'X','X')):('R','B','Rr','B','Rr','U','R','Ur','R','B','B','Rr'),
    (('X',1,'X'),(1,'X','X'),('X','X',1),('X',1,'X'),(1,1,'X',1,1,'X','X','X',1)):('R','B','B','R','R','U','R','Ur','R','B','B','R'),
    (('X','X','X'),(1,1,'X'),('X',1,1),('X','X','X'),(1,'X','X','X',1,1,'X',1,1)):('U','R','Br','Rr','Br','R','B','Rr','Ur'),
    #knight move shape
    ((1,1,'X'),(1,'X','X'),(1,1,'X'),('X','X','X'),('X','X',1,1,1,1,'X','X','X')):('L','Ur','Lr','Br','L','U','Lr','Fr','Br','F'),
    (('X',1,1),('X','X','X'),('X',1,1),('X','X',1),(1,'X','X',1,1,1,'X','X','X')):('Rr','U','R','B','Rr','Ur','R','U','Br','Ur'),
    (('X',1,'X'),('X','X',1),('X',1,1),('X','X',1),('X','X','X',1,1,1,1,'X','X')):('L','Ur','Lr','R','B','Rr','Br','L','Ur','Lr'),
    ((1,1,'X'),(1,'X','X'),('X',1,'X'),(1,'X','X'),(1,'X','X',1,1,1,'X','X','X')):('Lr','Br','L','Rr','Br','R','B','Lr','Br','L'),
    #awkward shapes
    (('X',1,'X'),('X',1,1),('X','X','X'),(1,'X','X'),('X',1,'X','X',1,1,1,'X',1)):('D','B','Dr','Br','D','Br','Dr','Rr','Br','R','D','B','Dr'),
    (('X','X',1),('X','X','X'),(1,1,'X'),('X',1,'X'),('X','X',1,1,1,'X','X',1,1)):('L','B','U','B','B','Ur','Br','U','B','B','Ur','Br','Lr'),
    ((1,'X',1),('X',1,'X'),('X',1,'X'),('X','X','X'),(1,'X',1,'X',1,1,'X',1,'X')):('R','B','Rr','B','R','B','B','Rr','U','R','B','Rr','Br','Ur'),
    (('X',1,'X'),('X',1,'X'),(1,'X',1),('X','X','X'),('X','X',1,1,1,'X','X',1,1)):('Rr','Br','R','Br','Rr','B','B','R','U','R','B','Rr','Br','Ur'),
    #L-shapes
    (('X','X',1),('X',1,'X'),(1,1,'X'),(1,'X',1),('X','X','X','X',1,1,'X',1,'X')):('U','R','B','Rr','Br','R','B','Rr','Br','Ur'),
    ((1,'X','X'),(1,'X',1),('X',1,1),('X',1,'X'),('X','X','X',1,1,'X','X',1,'X')):('Ur','Lr','Br','L','B','Lr','Br','L','B','U'),
    (('X','X',1),('X','X','X'),(1,1,'X'),(1,1,1),('X','X','X',1,1,'X','X',1,'X')):('L','Ur','L','L','D','L','L','U','L','L','Dr','L'),
    (('X',1,1),('X','X','X'),(1,'X','X'),(1,1,1),('X',1,'X',1,1,'X','X','X','X')):('Lr','D','L','L','Ur','L','L','Dr','L','L','U','L'),
    (('X',1,'X'),(1,'X',1),('X','X','X'),(1,1,1),('X',1,'X',1,1,'X','X','X','X')):('Lr','Dr','R','Dr','Rr','D','R','Dr','Rr','D','D','L'),
    (('X','X','X'),(1,'X',1),('X',1,'X'),(1,1,1),('X','X','X',1,1,'X','X',1,'X')):('L','U', 'Rr', 'U', 'R', 'Ur', 'Rr', 'U', 'R', 'U','U','Lr'),
    #lightning bolts
    ((1,'X','X'),(1,1,'X'),(1,1,'X'),('X','X','X'),('X','X',1,'X',1,1,'X',1,'X')):('L','U', 'R', 'U', 'R', 'U', 'U','Lr'),
    (('X',1,1),('X',1,1),('X','X',1),('X','X','X'),('X','X',1,'X',1,1,'X',1,'X')):('Lr','Dr','R','Dr','Rr','D','D','L'),
    ((1,1,'X'),(1,'X','X'),(1,'X','X'),('X',1,'X'),('X',1,1,1,1,'X','X','X','X')):('Lr','R','R','D','Rr','D','R','D','D','Rr','D','Rr','L'),
    (('X','X',1),('X','X',1),('X',1,1),('X',1,'X'),('X','X','X',1,1,'X','X',1,1)):('L','Rr','Rr','Ur','R'),
    ((1,1,'X'),('X','X',1),('X',1,'X'),('X','X','X'),('X','X',1,1,1,1,1,'X','X')):('L','Ur','Lr','Br','L','B','U','Br','Lr'),
    (('X',1,1),('X','X','X'),('X',1,'X'),(1,'X','X'),(1,'X','X',1,1,1,'X','X',1)):('Rr','U','R','B','Rr','Br','Ur','B','R'),
    #no edges flipped correctly
    (('X',1,'X'),(1,1,1),('X',1,'X'),(1,1,1),('X','X','X','X',1,'X','X','X','X')):('R','B','B','R','R','U','R','Ur','B','B','Rr','U','R','Ur'),
    (('X',1,1),('X',1,'X'),(1,1,'X'),(1,1,1),('X','X','X','X',1,'X','X','X','X')):('U','R','B','Rr','Br','Ur','D','B','L','Br','Lr','Dr'),
    ((1,1,'X'),(1,1,'X'),('X',1,'X'),(1,1,'X'),(1,'X','X','X',1,'X','X','X','X')):('D','B','L','Br','Lr','Dr','Br','U','R','B','Rr','Br','Ur'),
    (('X',1,'X'),('X',1,1),('X',1,1),('X',1,1),('X','X','X','X',1,'X',1,'X','X')):('D','B','L','Br','Lr','Dr','B','U','R','B','Rr','Br','Ur'),
    (('X',1,'X'),('X',1,'X'),(1,1,1),('X',1,'X'),('X','X','X','X',1,'X',1,'X',1)):('B','R','B','B','R','R','U','R','Ur','B','B','Rr','L','U','R','Ur','Lr','Br'),
    (('X',1,'X'),('X',1,1),('X',1,'X'),(1,1,'X'),('X','X','X','X',1,'X',1,'X',1)):('R','Lr','D','R','D','Rr','Dr','Rr','Rr','L','U','R','Ur'),
    (('X',1,1),('X',1,'X'),('X',1,'X'),(1,1,'X'),(1,'X','X','X',1,'X','X','X',1)):('R','B','Rr','B','Rr','U','R','Ur','B','B','Rr','U','R','Ur'),
    (('X',1,'X'),('X',1,'X'),('X',1,'X'),('X',1,'X'),(1,'X',1,'X',1,'X',1,'X',1)):('R','Lr','D','R','D','Rr','Dr','R','R','L','L','U','R','Ur','Lr')

}
PLL_kanten={
    ((0,0),(3,1),(1,2),(2,3)):['R','R','B','R','B','Rr','Br','Rr','Br','Rr','B','Rr'],
    ((0,0),(2,1),(3,2),(1,3)):['R','Br','R','B','R','B','R','Br','Rr','Br','R','R'],
    ((3,0),(2,1),(1,2),(1,3)):['R','R','L','L','F','R','R','L','L','B','Rr','L','U','U','R','R','L','L','D','D','L','Rr','B','B'],
    ((1,0),(0,1),(3,2),(2,3)):['B','R','R','L','L','F','R','R','L','L','B','Rr','L','U','U','R','R','L','L','D','D','L','Rr','B'],
    ((2,0),(3,1),(0,2),(1,3)):['R','R','L','L','F','R','R','L','L','B','B','R','R','L','L','F','R','R','L','L'],

    ((3,0),(1,1),(0,2),(2,3)):['B','R','R','B','R','B','Rr','Br','Rr','Br','Rr','B','Rr','B'],
    ((2,0),(1,1),(3,2),(0,3)):['B','R','Br','R','B','R','B','R','Br','Rr','Br','R','R','B'],
    
    ((3,0),(0,1),(2,2),(1,3)):['B','B','R','R','B','R','B','Rr','Br','Rr','Br','Rr','B','Rr','B','B'],
    ((1,0),(3,1),(2,2),(0,3)):['B','B','R','Br','R','B','R','B','R','Br','Rr','Br','R','R','B','B'],
    
    ((2,0),(0,1),(1,2),(3,3)):['Br','R','R','B','R','B','Rr','Br','Rr','Br','Rr','B','Rr','Br'],
    ((1,0),(2,1),(0,2),(3,3)):['Br','R','Br','R','B','R','B','R','Br','Rr','Br','R','R','Br'],
}
PLLL={
    ((0,0),(3,1),(1,2),(2,3)):['Br','Rr','U','Rr','D','D','R','Ur','Rr','D','D','R','R','B','B'],
    ((0,0),(2,1),(3,2),(1,3)):['Br','R','R','D','D','R','U','Rr','D','D','R','Ur','R','B'],
    ((3,0),(2,1),(1,2),(0,3)):['R','Dr','Rr','U','R','D','Rr','Ur','R','D','Rr','U','R','Dr','Rr','Ur'],
    ((1,0),(0,1),(3,2),(2,3)):['B','R','Dr','Rr','U','R','D','Rr','Ur','R','D','Rr','U','R','Dr','Rr','Ur','Br'],

    ((3,0),(1,1),(0,2),(2,3)):['B','B','Rr','U','Rr','D','D','R','Ur','Rr','D','D','R','R','B','B','B'],
    ((2,0),(1,1),(3,2),(0,3)):['B','B','R','R','D','D','R','U','Rr','D','D','R','Ur','R','B','B'],

    ((3,0),(0,1),(2,2),(1,3)):['B','Rr','U','Rr','D','D','R','Ur','Rr','D','D','R','R','Br','B'],
    ((1,0),(3,1),(2,2),(0,3)):['B','R','R','D','D','R','U','Rr','D','D','R','Ur','R','Br'],
    
    ((2,0),(0,1),(1,2),(3,3)):['Rr','U','Rr','D','D','R','Ur','Rr','D','D','R','R','B'],
    ((1,0),(2,1),(0,2),(3,3)):['R','R','D','D','R','U','Rr','D','D','R','Ur','R'],
}


Right = {
    (0, 0): (3, 0), (0, 1): (0, 1), (0, 2): (0, 2), (0, 3): (3, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (3, 6), (0, 7): (0, 7), (0, 8): (0, 8), 
    (1, 0): (0, 0), (1, 1): (1, 1), (1, 2): (1, 2), (1, 3): (0, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (0, 6), (1, 7): (1, 7), (1, 8): (1, 8), 
    (2, 0): (1, 0), (2, 1): (2, 1), (2, 2): (2, 2), (2, 3): (1, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (1, 6), (2, 7): (2, 7), (2, 8): (2, 8),
    (3, 0): (2, 0), (3, 1): (3, 1), (3, 2): (3, 2), (3, 3): (2, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (2, 6), (3, 7): (3, 7), (3, 8): (3, 8), 
    (4, 0): (4, 0), (4, 1): (4, 1), (4, 2): (4, 2), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (4, 6), (4, 7): (4, 7), (4, 8): (4, 8), 
    (5, 0): (5, 2), (5, 1): (5, 5), (5, 2): (5, 8), (5, 3): (5, 1), (5, 4): (5, 4), (5, 5): (5, 7), (5, 6): (5, 0), (5, 7): (5, 3), (5, 8): (5, 6), 
}
Left = {
    (0, 0): (0, 0), (0, 1): (0, 1), (0, 2): (1, 2), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (1, 5), (0, 6): (0, 6), (0, 7): (0, 7), (0, 8): (1, 8), 
    (1, 0): (1, 0), (1, 1): (1, 1), (1, 2): (2, 2), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (2, 5), (1, 6): (1, 6), (1, 7): (1, 7), (1, 8): (2, 8), 
    (2, 0): (2, 0), (2, 1): (2, 1), (2, 2): (3, 2), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (3, 5), (2, 6): (2, 6), (2, 7): (2, 7), (2, 8): (3, 8), 
    (3, 0): (3, 0), (3, 1): (3, 1), (3, 2): (0, 2), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (0, 5), (3, 6): (3, 6), (3, 7): (3, 7), (3, 8): (0, 8), 
    (4, 0): (4, 2), (4, 1): (4, 5), (4, 2): (4, 8), (4, 3): (4, 1), (4, 4): (4, 4), (4, 5): (4, 7), (4, 6): (4, 0), (4, 7): (4, 3), (4, 8): (4, 6), 
    (5, 0): (5, 0), (5, 1): (5, 1), (5, 2): (5, 2), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (5, 6), (5, 7): (5, 7), (5, 8): (5, 8), 
}
Up = {
    (0, 0): (0, 0), (0, 1): (0, 1), (0, 2): (0, 2), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (4, 2), (0, 7): (4, 1), (0, 8): (4, 0), 
    (1, 0): (1, 0), (1, 1): (1, 1), (1, 2): (1, 2), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (1, 6), (1, 7): (1, 7), (1, 8): (1, 8), 
    (2, 0): (5, 8), (2, 1): (5, 7), (2, 2): (5, 6), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (2, 6), (2, 7): (2, 7), (2, 8): (2, 8), 
    (3, 0): (3, 2), (3, 1): (3, 5), (3, 2): (3, 8), (3, 3): (3, 1), (3, 4): (3, 4), (3, 5): (3, 7), (3, 6): (3, 0), (3, 7): (3, 3), (3, 8): (3, 6), 
    (4, 0): (2, 0), (4, 1): (2, 1), (4, 2): (2, 2), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (4, 6), (4, 7): (4, 7), (4, 8): (4, 8), 
    (5, 0): (5, 0), (5, 1): (5, 1), (5, 2): (5, 2), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (0, 6), (5, 7): (0, 7), (5, 8): (0, 8), 
}
Down = {
    (0, 0): (5, 0), (0, 1): (5, 1), (0, 2): (5, 2), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (0, 6), (0, 7): (0, 7), (0, 8): (0, 8), 
    (1, 0): (1, 2), (1, 1): (1, 5), (1, 2): (1, 8), (1, 3): (1, 1), (1, 4): (1, 4), (1, 5): (1, 7), (1, 6): (1, 0), (1, 7): (1, 3), (1, 8): (1, 6), 
    (2, 0): (2, 0), (2, 1): (2, 1), (2, 2): (2, 2), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (4, 6), (2, 7): (4, 7), (2, 8): (4, 8), 
    (3, 0): (3, 0), (3, 1): (3, 1), (3, 2): (3, 2), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (3, 6), (3, 7): (3, 7), (3, 8): (3, 8), 
    (4, 0): (4, 0), (4, 1): (4, 1), (4, 2): (4, 2), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (0, 2), (4, 7): (0, 1), (4, 8): (0, 0), 
    (5, 0): (2, 8), (5, 1): (2, 7), (5, 2): (2, 6), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (5, 6), (5, 7): (5, 7), (5, 8): (5, 8), 
}
Front = {
    (0, 0): (0, 2), (0, 1): (0, 5), (0, 2): (0, 8), (0, 3): (0, 1), (0, 4): (0, 4), (0, 5): (0, 7), (0, 6): (0, 0), (0, 7): (0, 3), (0, 8): (0, 6), 
    (1, 0): (1, 0), (1, 1): (1, 1), (1, 2): (1, 2), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (4, 8), (1, 7): (4, 5), (1, 8): (4, 2), 
    (2, 0): (2, 0), (2, 1): (2, 1), (2, 2): (2, 2), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (2, 6), (2, 7): (2, 7), (2, 8): (2, 8), 
    (3, 0): (5, 2), (3, 1): (5, 5), (3, 2): (5, 8), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (3, 6), (3, 7): (3, 7), (3, 8): (3, 8), 
    (4, 0): (4, 0), (4, 1): (4, 1), (4, 2): (3, 0), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (3, 1), (4, 6): (4, 6), (4, 7): (4, 7), (4, 8): (3, 2), 
    (5, 0): (5, 0), (5, 1): (5, 1), (5, 2): (1, 8), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (1, 7), (5, 6): (5, 6), (5, 7): (5, 7), (5, 8): (1, 6), 
}
Back= {
    (0, 0): (0, 0), (0, 1): (0, 1), (0, 2): (0, 2), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (0, 6), (0, 7): (0, 7), (0, 8): (0, 8), 
    (1, 0): (5, 6), (1, 1): (5, 3), (1, 2): (5, 0), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (1, 6), (1, 7): (1, 7), (1, 8): (1, 8), 
    (2, 0): (2, 2), (2, 1): (2, 5), (2, 2): (2, 8), (2, 3): (2, 1), (2, 4): (2, 4), (2, 5): (2, 7), (2, 6): (2, 0), (2, 7): (2, 3), (2, 8): (2, 6), 
    (3, 0): (3, 0), (3, 1): (3, 1), (3, 2): (3, 2), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (4, 0), (3, 7): (4, 3), (3, 8): (4, 6), 
    (4, 0): (1, 2), (4, 1): (4, 1), (4, 2): (4, 2), (4, 3): (1, 1), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (1, 0), (4, 7): (4, 7), (4, 8): (4, 8), 
    (5, 0): (3, 6), (5, 1): (5, 1), (5, 2): (5, 2), (5, 3): (3, 7), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (3, 8), (5, 7): (5, 7), (5, 8): (5, 8), 
}

Rightr= {
    (0, 0): (1, 0), (0, 1): (0, 1), (0, 2): (0, 2), (0, 3): (1, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (1, 6), (0, 7): (0, 7), (0, 8): (0, 8), 
    (1, 0): (2, 0), (1, 1): (1, 1), (1, 2): (1, 2), (1, 3): (2, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (2, 6), (1, 7): (1, 7), (1, 8): (1, 8), 
    (2, 0): (3, 0), (2, 1): (2, 1), (2, 2): (2, 2), (2, 3): (3, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (3, 6), (2, 7): (2, 7), (2, 8): (2, 8), 
    (3, 0): (0, 0), (3, 1): (3, 1), (3, 2): (3, 2), (3, 3): (0, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (0, 6), (3, 7): (3, 7), (3, 8): (3, 8), 
    (4, 0): (4, 0), (4, 1): (4, 1), (4, 2): (4, 2), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (4, 6), (4, 7): (4, 7), (4, 8): (4, 8), 
    (5, 0): (5, 6), (5, 1): (5, 3), (5, 2): (5, 0), (5, 3): (5, 7), (5, 4): (5, 4), (5, 5): (5, 1), (5, 6): (5, 8), (5, 7): (5, 5), (5, 8): (5, 2), 
}
Leftr = {
    (0, 0): (0, 0), (0, 1): (0, 1), (0, 2): (3, 2), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (3, 5), (0, 6): (0, 6), (0, 7): (0, 7), (0, 8): (3, 8), 
    (1, 0): (1, 0), (1, 1): (1, 1), (1, 2): (0, 2), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (0, 5), (1, 6): (1, 6), (1, 7): (1, 7), (1, 8): (0, 8), 
    (2, 0): (2, 0), (2, 1): (2, 1), (2, 2): (1, 2), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (1, 5), (2, 6): (2, 6), (2, 7): (2, 7), (2, 8): (1, 8), 
    (3, 0): (3, 0), (3, 1): (3, 1), (3, 2): (2, 2), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (2, 5), (3, 6): (3, 6), (3, 7): (3, 7), (3, 8): (2, 8), 
    (4, 0): (4, 6), (4, 1): (4, 3), (4, 2): (4, 0), (4, 3): (4, 7), (4, 4): (4, 4), (4, 5): (4, 1), (4, 6): (4, 8), (4, 7): (4, 5), (4, 8): (4, 2), 
    (5, 0): (5, 0), (5, 1): (5, 1), (5, 2): (5, 2), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (5, 6), (5, 7): (5, 7), (5, 8): (5, 8), 
}
Upr = {
    (0, 0): (0, 0), (0, 1): (0, 1), (0, 2): (0, 2), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (5, 6), (0, 7): (5, 7), (0, 8): (5, 8), 
    (1, 0): (1, 0), (1, 1): (1, 1), (1, 2): (1, 2), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (1, 6), (1, 7): (1, 7), (1, 8): (1, 8), 
    (2, 0): (4, 0), (2, 1): (4, 1), (2, 2): (4, 2), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (2, 6), (2, 7): (2, 7), (2, 8): (2, 8), 
    (3, 0): (3, 6), (3, 1): (3, 3), (3, 2): (3, 0), (3, 3): (3, 7), (3, 4): (3, 4), (3, 5): (3, 1), (3, 6): (3, 8), (3, 7): (3, 5), (3, 8): (3, 2), 
    (4, 0): (0, 8), (4, 1): (0, 7), (4, 2): (0, 6), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (4, 6), (4, 7): (4, 7), (4, 8): (4, 8), 
    (5, 0): (5, 0), (5, 1): (5, 1), (5, 2): (5, 2), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (2, 2), (5, 7): (2, 1), (5, 8): (2, 0), 
}
Downr = {
    (0, 0): (4, 8), (0, 1): (4, 7), (0, 2): (4, 6), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (0, 6), (0, 7): (0, 7), (0, 8): (0, 8), 
    (1, 0): (1, 6), (1, 1): (1, 3), (1, 2): (1, 0), (1, 3): (1, 7), (1, 4): (1, 4), (1, 5): (1, 1), (1, 6): (1, 8), (1, 7): (1, 5), (1, 8): (1, 2), 
    (2, 0): (2, 0), (2, 1): (2, 1), (2, 2): (2, 2), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (5, 2), (2, 7): (5, 1), (2, 8): (5, 0), 
    (3, 0): (3, 0), (3, 1): (3, 1), (3, 2): (3, 2), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (3, 6), (3, 7): (3, 7), (3, 8): (3, 8), 
    (4, 0): (4, 0), (4, 1): (4, 1), (4, 2): (4, 2), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (2, 6), (4, 7): (2, 7), (4, 8): (2, 8), 
    (5, 0): (0, 0), (5, 1): (0, 1), (5, 2): (0, 2), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (5, 6), (5, 7): (5, 7), (5, 8): (5, 8), 
}
Frontr = {
    (0, 0): (0, 6), (0, 1): (0, 3), (0, 2): (0, 0), (0, 3): (0, 7), (0, 4): (0, 4), (0, 5): (0, 1), (0, 6): (0, 8), (0, 7): (0, 5), (0, 8): (0, 2), 
    (1, 0): (1, 0), (1, 1): (1, 1), (1, 2): (1, 2), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (5, 8), (1, 7): (5, 5), (1, 8): (5, 2), 
    (2, 0): (2, 0), (2, 1): (2, 1), (2, 2): (2, 2), (2, 3): (2, 3), (2, 4): (2, 4), (2, 5): (2, 5), (2, 6): (2, 6), (2, 7): (2, 7), (2, 8): (2, 8), 
    (3, 0): (4, 2), (3, 1): (4, 5), (3, 2): (4, 8), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (3, 6), (3, 7): (3, 7), (3, 8): (3, 8), 
    (4, 0): (4, 0), (4, 1): (4, 1), (4, 2): (1, 8), (4, 3): (4, 3), (4, 4): (4, 4), (4, 5): (1, 7), (4, 6): (4, 6), (4, 7): (4, 7), (4, 8): (1, 6), 
    (5, 0): (5, 0), (5, 1): (5, 1), (5, 2): (3, 0), (5, 3): (5, 3), (5, 4): (5, 4), (5, 5): (3, 1), (5, 6): (5, 6), (5, 7): (5, 7), (5, 8): (3, 2), 
}
Backr = {
    (0, 0): (0, 0), (0, 1): (0, 1), (0, 2): (0, 2), (0, 3): (0, 3), (0, 4): (0, 4), (0, 5): (0, 5), (0, 6): (0, 6), (0, 7): (0, 7), (0, 8): (0, 8), 
    (1, 0): (4, 6), (1, 1): (4, 3), (1, 2): (4, 0), (1, 3): (1, 3), (1, 4): (1, 4), (1, 5): (1, 5), (1, 6): (1, 6), (1, 7): (1, 7), (1, 8): (1, 8), 
    (2, 0): (2, 6), (2, 1): (2, 3), (2, 2): (2, 0), (2, 3): (2, 7), (2, 4): (2, 4), (2, 5): (2, 1), (2, 6): (2, 8), (2, 7): (2, 5), (2, 8): (2, 2), 
    (3, 0): (3, 0), (3, 1): (3, 1), (3, 2): (3, 2), (3, 3): (3, 3), (3, 4): (3, 4), (3, 5): (3, 5), (3, 6): (5, 0), (3, 7): (5, 3), (3, 8): (5, 6), 
    (4, 0): (3, 6), (4, 1): (4, 1), (4, 2): (4, 2), (4, 3): (3, 7), (4, 4): (4, 4), (4, 5): (4, 5), (4, 6): (3, 8), (4, 7): (4, 7), (4, 8): (4, 8), 
    (5, 0): (1, 2), (5, 1): (5, 1), (5, 2): (5, 2), (5, 3): (1, 1), (5, 4): (5, 4), (5, 5): (5, 5), (5, 6): (1, 0), (5, 7): (5, 7), (5, 8): (5, 8), 
}
#inverted
def Rr(y):
    x=5
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][0],y[x][1],y[x][2],y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=\
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[0][0],y[0][3],y[0][6],  y[1][0],y[1][3],y[1][6], y[2][0],y[2][3],y[2][6], y[3][0],y[3][3],y[3][6]  =\
    y[3][0],y[3][3],y[3][6],  y[0][0],y[0][3],y[0][6], y[1][0],y[1][3],y[1][6], y[2][0],y[2][3],y[2][6],
    
    return y
def Lr(y):
    x=4
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[0][2],y[0][5],y[0][8],  y[1][2],y[1][5],y[1][8], y[2][2],y[2][5],y[2][8], y[3][2],y[3][5],y[3][8]  =  \
    y[1][2],y[1][5],y[1][8],  y[2][2],y[2][5],y[2][8], y[3][2],y[3][5],y[3][8], y[0][2],y[0][5],y[0][8], 
   
    return y
def Fr(y):
    S1=1
    S2=4
    S3=3
    S4=5
    x=0
    y[x][0],y[x][1],y[x][2],y[x][3],y[x][5],y[x][6],  y[x][7],  y[x][8]  =y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][5], y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2], =\
    y[S2][8], y[S2][5],y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2],     y[S1][6], y[S1][7],y[S1][8]
    
    return y
def Br(y):
    S1=1
    S2=4
    S3=3
    S4=5
    x=2
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[S1][0], y[S1][1],y[S1][2],     y[S2][6], y[S2][3], y[S2][0],     y[S3][6], y[S3][7], y[S3][8],     y[S4][6], y[S4][3], y[S4][0]  = \
    y[S4][6], y[S4][3], y[S4][0]  , y[S1][0], y[S1][1],y[S1][2],     y[S2][0], y[S2][3], y[S2][6],     y[S3][8], y[S3][7], y[S3][6],       
    
    return y
def Ur(y):
    S1=0
    S2=5
    S3=2
    S4=4
    x=3
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2],     y[S4][0], y[S4][1], y[S4][2]  = \
    y[S4][2], y[S4][1], y[S4][0]    ,y[S1][8], y[S1][7],y[S1][6],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2]     
    
    
    return y
def Dr(y):
    S1=0
    S2=4
    S3=2
    S4=5
    x=1
    
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[S1][0], y[S1][1],y[S1][2],     y[S2][6], y[S2][7], y[S2][8],     y[S3][6], y[S3][7], y[S3][8],     y[S4][0], y[S4][1], y[S4][2]  = \
    y[S4][0], y[S4][1], y[S4][2]     , y[S1][2], y[S1][1],y[S1][0],     y[S2][6], y[S2][7], y[S2][8],     y[S3][8], y[S3][7], y[S3][6],  
    
    return y


def R(y):
    x=5
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=\
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[3][0],y[3][3],y[3][6],  y[0][0],y[0][3],y[0][6], y[1][0],y[1][3],y[1][6], y[2][0],y[2][3],y[2][6],=\
    y[0][0],y[0][3],y[0][6],  y[1][0],y[1][3],y[1][6], y[2][0],y[2][3],y[2][6], y[3][0],y[3][3],y[3][6]  
    

    
    return y
def L(y):
    x=4
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[1][2],y[1][5],y[1][8],  y[2][2],y[2][5],y[2][8], y[3][2],y[3][5],y[3][8], y[0][2],y[0][5],y[0][8], =  \
    y[0][2],y[0][5],y[0][8],  y[1][2],y[1][5],y[1][8], y[2][2],y[2][5],y[2][8], y[3][2],y[3][5],y[3][8]

   
    return y
def F(y):
    S1=1
    S2=4
    S3=3
    S4=5
    x=0
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[S2][8], y[S2][5],y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2],     y[S1][6], y[S1][7],y[S1][8]=\
    y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][5], y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2]
    

    
    return y
def B(y):
    S1=1
    S2=4
    S3=3
    S4=5
    x=2
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[S4][6], y[S4][3], y[S4][0]  , y[S1][0], y[S1][1],y[S1][2],     y[S2][0], y[S2][3], y[S2][6],     y[S3][8], y[S3][7], y[S3][6], =\
    y[S1][0], y[S1][1],y[S1][2],     y[S2][6], y[S2][3], y[S2][0],     y[S3][6], y[S3][7], y[S3][8],     y[S4][6], y[S4][3], y[S4][0]  
    
     

    
    return y
def U(y):
    S1=0
    S2=5
    S3=2
    S4=4
    x=3
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    
    y[S4][2], y[S4][1], y[S4][0]     , y[S1][8], y[S1][7],y[S1][6],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2] =\
    y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2],     y[S4][0], y[S4][1], y[S4][2]   
        
    return y
def D(y):
    S1=0
    S2=4
    S3=2
    S4=5
    x=1
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[S4][0], y[S4][1], y[S4][2]     , y[S1][2], y[S1][1],y[S1][0],     y[S2][6], y[S2][7], y[S2][8],     y[S3][8], y[S3][7], y[S3][6],  =\
    y[S1][0], y[S1][1],y[S1][2],     y[S2][6], y[S2][7], y[S2][8],     y[S3][6], y[S3][7], y[S3][8],     y[S4][0], y[S4][1], y[S4][2]  
    


    
    return y

def new_tuple(pos, move):
    #print(f'****3{pos,move}')
    All_moves={'F':Front, 'R':Right, 'L':Left, 'B':Back,'U':Up,'D':Down,
               'Fr':Frontr, 'Rr':Rightr, 'Lr':Leftr, 'Br':Backr,'Ur':Upr,'Dr':Downr }
    new_tuplet=All_moves[move][pos]
    #print(f'****4{pos,move,new_tuplet}')

    return new_tuplet


def find_eck(x):
    
    ecken=[0,2,6,8]
    weisse_ecken=[]
    for seite in range (6):
        for eck in ecken:
            if x[seite][eck]==x[0][4]:
                weisse_ecken.append([seite,eck])
    return weisse_ecken

def all_ecken(x):
    kanten = find_eck(x)
    kanten_cross = []
    for i in kanten:
        k = tuple(i)
        if k in eck:
            sub = eck[k]
            kanten_cross.append((k, sub[0],sub[1]))
    print(kanten_cross)
    return kanten_cross
def ecken_f2l(x):
    executed = []
    counter = 0
    ecken = all_ecken(x)
    farben = [x[1][4], x[5][4], x[4][4], x[3][4]]

    move_map = {
        "F": F, "Fr": Fr,
        "R": R, "Rr": Rr,
        "L": L, "Lr": Lr,
        "B": B, "Br": Br,
        "U": U, "Ur": Ur,
        "D": D, "Dr": Dr
    }
    Ziel = [None, None, None, None]
    print(ecken)
    print(farben)
    for ecke in ecken:
        farbenpaar = {x[ecke[1][0]][ecke[1][1]], x[ecke[2][0]][ecke[2][1]]}
        print(farbenpaar,({farben[2], farben[3]}))
        if farbenpaar == {farben[0], farben[1]} :
            Ziel[0] = ecke
        elif farbenpaar == {farben[0], farben[2]} :
            Ziel[1] = ecke
        elif farbenpaar == {farben[2], farben[3]} :
            Ziel[2] = ecke
        elif farbenpaar == {farben[3], farben[1]}:
             Ziel[3] = ecke
    print(11111111111,Ziel)
    while counter < 4:

        if Ziel[counter] is None:
            counter += 1
            continue
        
        kante = Ziel[counter]
        if counter == 0:
            moves = moves_eck0[kante]
        elif counter == 1:
            moves = moves_eck1[kante]
        elif counter == 2:
            moves = moves_eck2[kante]
        elif counter == 3:
            moves = moves_eck3[kante]
        executed.extend(moves)
        for move in moves:
            x=move_map[move](x)
            Ziel = [(new_tuple(a, move), new_tuple(b, move),new_tuple(c,move)) for (a, b, c) in Ziel]

        
        counter += 1
    print(executed,x)
    
    return executed,x
#kanten
def finde_kanten(a):
    kanten=[1,3,5,7]
    weisse_kanten=[]
    all=[]
    for i in range (1,6):
        for l in kanten:
            if (i,l) in verbotene:
                print('a')
                continue
            elif kanten_f[(i,l)] in weisse_kanten:
                print('b')
                continue 
            elif a[i][l]==a[2][4]:
                print('c')
                continue
            elif a[i][l]==a[0][4]:
                print('d')
                continue
            

            elif x[kanten_f[(i,l)][0]][kanten_f[(i,l)][1]]==x[2][4]:
                print('f')
                continue
            else:
                print('g')
                weisse_kanten.append(((i,l)))
    for k in weisse_kanten:
        
        
        all.append(((k),kanten_f[k]))
    print(f"WWWWWWWWWWWWWWW{all}")
    return all
def finde_kanten_V3(a):
    kanten = [1, 3, 5, 7]
    weisse_kanten = []
    all_pairs = []

    for i in range(1, 6):
        for l in kanten:
            p = (i, l)
              # Partner-Position

            if p  in verbotene:
                continue
            q = kanten_f[p]

            if q in weisse_kanten:
                continue

            if (a[i][l] or a[q[0]][q[1]]== a[2][4]) or (a[i][l]or a[q[0]][q[1]] == a[0][4]):
                print(p,q)
                continue
            # (optional, symmetrisch) Skip: Up-Farbe auf q
            # if a[q[0]][q[1]] == a[0][4]:
            #     continue

            weisse_kanten.append(p)

    for k in weisse_kanten:
        all_pairs.append((k, kanten_f[k]))
    print(all_pairs)
    return all_pairs
def finde_kanten_V4(a):
    kanten = [1,3,5,7]
    weisse_kanten = []
    all_pairs = []

    for i in range(1,6):
        for l in kanten:
            p = (i,l)
            if p in verbotene:
                continue
            if kanten_f[p] in weisse_kanten:
                continue
            if a[i][l] == a[2][4]:
                continue
            if a[i][l] == a[0][4]:
                continue
            if a[kanten_f[p][0]][kanten_f[p][1]] == a[2][4]:   # <<< hier war der Bug
                continue

            
            weisse_kanten.append(p)

    for k in weisse_kanten:
        all_pairs.append((k, kanten_f[k]))

    print(f"WWWWWWWWWWWWWWW{all_pairs}")
    return all_pairs

def finde_kanten_v2(a):
    kanten = [1,3,5,7]
    seen = set()          # Duplikate vermeiden (ungerichtetes Paar)
    result = []

    for i in range(1,6):
        for l in kanten:
            if (i,l) in verbotene:
                continue

            p = (i,l)
            q = kanten_f[p]

            if a[i][l] == a[2][4]:
                continue
            if a[i][l] == a[0][4]:
                continue
            if a[q[0]][q[1]] == a[2][4]:
                continue

            key = frozenset({p, q})
            if key in seen:
                continue
            seen.add(key)

            result.append((p, q))
    print(result)

    return result
def kanten_f2l(x):
    executed = []
    counter = 0

    kanten = finde_kanten_V4(x)  
    farben = [x[1][4], x[5][4], x[4][4], x[3][4]]
    move_fn = {
        "F": F, "Fr": Fr, "R": R, "Rr": Rr, "L": L, "Lr": Lr,
        "B": B, "Br": Br, "U": U, "Ur": Ur, "D": D, "Dr": Dr
    }
    Ziel = [None, None, None, None]
    for p, q in kanten:
        farbenpaar = {x[p[0]][p[1]], x[q[0]][q[1]]}

        if farbenpaar == {x[1][4], x[5][4]}:
            if x[p[0]][p[1]] != x[1][4]: p, q = q, p
            Ziel[0] = (p, q)

        elif farbenpaar == {x[1][4], x[4][4]}:
            if x[p[0]][p[1]] != x[4][4]: p, q = q, p
            Ziel[1] = (p, q)

        elif farbenpaar == {x[4][4], x[3][4]}:
            if x[p[0]][p[1]] != x[4][4]: p, q = q, p
            Ziel[2] = (p, q)

        elif farbenpaar == {x[3][4], x[5][4]}:
            if x[p[0]][p[1]] != x[5][4]: p, q = q, p
            Ziel[3] = (p, q)
    while counter < 4:
        # aus den getrackten Paaren das aktuelle Ziel bestimmen (kein Rescan)
        

        kante = Ziel[counter]
        if kante is None:
            counter += 1
            continue
        

        # passende Move-Liste
        if   counter == 0: moves = moves_kant0[kante]
        elif counter == 1: moves = moves_kant1[kante]
        elif counter == 2: moves = moves_kant2[kante]
        else:              moves = moves_kant3[kante]

        executed.extend(moves)
        for move in moves:
            x = move_fn[move](x)
            
            Ziel = [(new_tuple(a, move), new_tuple(b, move)) for (a, b) in Ziel]
        counter += 1
        

        #print(f'(((((({kanten}')
        
    print(executed,x)
    return executed, x  # optional cur_kanten zusätzlich zurückgeben

#def LL_turn(x):
#   x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8]=x[2],x[5],x[8],x[1],x[4],x[7],x[0],x[3],x[8]
def Oll(Form):
    executed=[]
    count=Form[2].count('Gel')
    counter=0
    Done=True
    move_fn = {
        "F": F, "Fr": Fr, "R": R, "Rr": Rr, "L": L, "Lr": Lr,
        "B": B, "Br": Br, "U": U, "Ur": Ur, "D": D, "Dr": Dr
    }
    if count==9:
        return 
    while  Done:
        a=[Form[1][2],Form[1][1],Form[1][0]]
        b=[Form[5][0],Form[5][3],Form[5][6]]
        c=[Form[3][6],Form[3][7],Form[3][8]]
        d=[Form[4][0],Form[4][3],Form[4][6]]
        e=Form[2]
        ges=[[1 if x==Form[2][4] else 'X' for x in a],[1 if x==Form[2][4] else 'X' for x in b],
        [1 if x==Form[2][4] else 'X' for x in c],[1 if x==Form[2][4] else 'X' for x in d],[1 if x==Form[2][4] else 'X' for x in e]]
        ges[0]=tuple(ges[0])
        ges[1]=tuple(ges[1])
        ges[2]=tuple(ges[2])
        ges[3]=tuple(ges[3])
        ges[4]=tuple(ges[4])
        ges=tuple(ges)
        print(ges)
        if ges in OLL_moves:
            moves=list(OLL_moves[ges])
            executed.extend(moves)
            for move in moves:
                Form = move_fn[move](Form)
            print(Form)
            a=[Form[1][2],Form[1][1],Form[1][0]]
            b=[Form[5][0],Form[5][3],Form[5][6]]
            c=[Form[3][6],Form[3][7],Form[3][8]]
            d=[Form[4][0],Form[4][3],Form[4][6]]
            e=Form[2]
            ges=[[1 if x==Form[2][4] else 'X' for x in a],[1 if x==Form[2][4] else 'X' for x in b],
            [1 if x==Form[2][4] else 'X' for x in c],[1 if x==Form[2][4] else 'X' for x in d],[1 if x==Form[2][4] else 'X' for x in e]]
            if ges[4].count(1)==9:
                return executed, Form
        else:
            Form=B(Form)
            executed.append('B')
            counter+=1
        
        if counter==4:
            break
    return executed
    

def Pll(x):
    executed=[]
    move_fn = {
        "F": F, "Fr": Fr, "R": R, "Rr": Rr, "L": L, "Lr": Lr,
        "B": B, "Br": Br, "U": U, "Ur": Ur, "D": D, "Dr": Dr
    }
    counter=0
    Done=True
    
    
    while Done:
        a=[x[1][2],x[1][1],x[1][0]]
        b=[x[5][0],x[5][3],x[5][6]]
        c=[x[3][6],x[3][7],x[3][8]]
        d=[x[4][0],x[4][3],x[4][6]]
        kanten=[a[1],b[1],c[1],d[1]]
        Ziel_kanten=[None,None,None,None]
        final_kanten=[None,None,None,None]
        for kante in kanten:
            print(kante)
            if kante==x[1][4]:
                Ziel_kanten[0]=kante
                final_kanten[0]=(kanten.index(kante),0)
            if kante==x[5][4]:
                Ziel_kanten[1]=kante
                final_kanten[1]=(kanten.index(kante),1)
            if kante==x[3][4]:
                Ziel_kanten[2]=kante
                final_kanten[2]=(kanten.index(kante),2)
            if kante==x[4][4]:
                Ziel_kanten[3]=kante
                final_kanten[3]=(kanten.index(kante),3)
            print(final_kanten)
        final_kanten=tuple(final_kanten)
        print(1)
        if  final_kanten not in PLL_kanten:
            x=B(x)
            executed.append('B')
            counter+=1
        else:
            print(f'eeeee{final_kanten}')
            moves=list(PLL_kanten[final_kanten])
            executed.extend(moves)  
            print(counter)
            Done=False 
    Done=True
       
    print(executed)
    while Done:
        a=[x[1][2],x[1][1],x[1][0]]
        b=[x[5][0],x[5][3],x[5][6]]
        c=[x[3][6],x[3][7],x[3][8]]
        d=[x[4][0],x[4][3],x[4][6]]
        ecken=[{a[0],d[2]},{b[0],a[2]},{c[0],b[2]},{d[0],c[2]}]
        ecken_farben=[{x[1][4],x[4][4]},{x[5][4],x[1][4]},{x[3][4],x[5][4]},{x[4][4],x[3][4]}]
        Ziel_ecken=[None,None,None,None]
        final_ecken=[None,None,None,None]
        for ecke in ecken:
            if ecke==ecken_farben[0]:
                Ziel_ecken[0]=ecke
                final_ecken[0]=(ecken.index(ecke),0)
            if ecke==ecken_farben[1]:
                Ziel_ecken[1]=ecke
                final_ecken[1]=(ecken.index(ecke),1)
            if ecke==ecken_farben[2]:
                Ziel_ecken[2]=ecke
                final_ecken[2]=(ecken.index(ecke),2)
            if ecke==ecken_farben[3]:
                Ziel_ecken[3]=ecke
                final_ecken[3]=(ecken.index(ecke),3)
    
        final_ecken=tuple(final_ecken)
        if  final_ecken not in PLLL:
            x=B(x)
            executed.append('B')
        else:
            print(f'eeeee{final_kanten}')
            moves=list(PLLL[final_ecken])
            
            executed.extend(moves)  
            Done=False 
    print(executed)
    if counter !=0:
        executed
    for move in executed:
        
        x = move_fn[move](x)
    print(move,x)
    x=Br(x)
    print(executed)
    return x,executed

def Pll_V2(x):
    executed = []
    move_fn = {"F":F,"Fr":Fr,"R":R,"Rr":Rr,"L":L,"Lr":Lr,"B":B,"Br":Br,"U":U,"Ur":Ur,"D":D,"Dr":Dr}

    # ---------- Kanten-PLL ----------
    spins = 0
    
    print(executed)
    spins = 0
    Done=True
    while Done:
        a=[x[1][2],x[1][1],x[1][0]]
        b=[x[5][0],x[5][3],x[5][6]]
        c=[x[3][6],x[3][7],x[3][8]]
        d=[x[4][0],x[4][3],x[4][6]]

        ecken=[{a[0],d[2]},{b[0],a[2]},{c[0],b[2]},{d[0],c[2]}]
        efarben=[{x[1][4],x[4][4]},{x[5][4],x[1][4]},{x[3][4],x[5][4]},{x[4][4],x[3][4]}]

        final_ecken=[None]*4
        for tgt_idx, tgt in enumerate(efarben):
            if tgt in ecken:
                final_ecken[tgt_idx]=(ecken.index(tgt), tgt_idx)
        final_ecken = tuple(final_ecken)
        print(final_ecken)
        if final_ecken in PLLL:
            moves = list(PLLL[final_ecken])
            executed.extend(moves)
            for m in moves:
                
                x = move_fn[m](x)
            Done=False
        else:
            x = B(x)
            executed.append('B')
            spins += 1
            if spins == 4:
                break

    # ggf. letzte Ausrichtung
    x = Br(x)
    print(x,executed)
    return x, executed

    



   

x=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Wei', 'Gel', 'Wei'], 
   ['Blu', 'Gre', 'Blu', 'Blu', 'Gre', 'Blu', 'Gre', 'Gre', 'Gre'], 
   ['Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Gel', 'Wei', 'Gel'], 
   ['Blu', 'Blu', 'Blu', 'Gre', 'Blu', 'Gre', 'Gre', 'Blu', 'Gre'], 
   ['Ora', 'Rot', 'Ora', 'Ora', 'Rot', 'Rot', 'Rot', 'Ora', 'Rot'], 
   ['Ora', 'Rot', 'Ora', 'Rot', 'Ora', 'Ora', 'Rot', 'Ora', 'Rot']]

#c=[
#['Blu', 'Gel', 'Blu', 'Blu', 'Gel', 'Blu', 'Blu', 'Gel', 'Blu'], 
#['Wei', 'Gre', 'Wei', 'Wei', 'Gre', 'Wei', 'Wei', 'Gre', 'Wei'], 
#['Gre', 'Wei', 'Gre', 'Gre', 'Wei', 'Gre', 'Gre', 'Wei', 'Gre'], 
#['Gel', 'Blu', 'Gel', 'Gel', 'Blu', 'Gel', 'Gel', 'Blu', 'Gel'], 
#['Ora', 'Ora', 'Ora', 'Rot', 'Rot', 'Rot', 'Ora', 'Ora', 'Ora'], 
#['Rot', 'Rot', 'Rot', 'Ora', 'Ora', 'Ora', 'Rot', 'Rot', 'Rot']]
#

V=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel'], 
   ['Wei', 'Rot', 'Gre', 'Blu', 'Gre', 'Blu', 'Gre', 'Gre', 'Gre'], 
   ['Gre', 'Gre', 'Wei', 'Ora', 'Wei', 'Wei', 'Rot', 'Gre', 'Wei'], 
   ['Blu', 'Blu', 'Blu', 'Wei', 'Blu', 'Wei', 'Wei', 'Wei', 'Ora'], 
   ['Blu', 'Blu', 'Rot', 'Rot', 'Rot', 'Rot', 'Rot', 'Ora', 'Rot'], 
   ['Blu', 'Rot', 'Ora', 'Gre', 'Ora', 'Ora', 'Ora', 'Ora', 'Ora']]

G=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel'], 
   ['Wei', 'Ora', 'Wei', 'Gre', 'Gre', 'Gre', 'Gre', 'Gre', 'Gre'], 
   ['Gre', 'Gre', 'Blu', 'Blu', 'Wei', 'Wei', 'Rot', 'Wei', 'Rot'], 
   ['Blu', 'Blu', 'Blu', 'Blu', 'Blu', 'Blu', 'Wei', 'Wei', 'Wei'], 
   ['Ora', 'Rot', 'Rot', 'Rot', 'Rot', 'Rot', 'Gre', 'Rot', 'Rot'], 
   ['Blu', 'Ora', 'Ora', 'Wei', 'Ora', 'Ora', 'Ora', 'Ora', 'Ora']]


K=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel'], 
   ['Rot', 'Rot', 'Blu', 'Gre', 'Gre', 'Gre', 'Gre', 'Gre', 'Gre'], 
   ['Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei'], 
   ['Blu', 'Blu', 'Blu', 'Blu', 'Blu', 'Blu', 'Rot', 'Gre', 'Gre'], 
   ['Ora', 'Rot', 'Rot', 'Ora', 'Rot', 'Rot', 'Ora', 'Rot', 'Rot'], 
   ['Gre', 'Ora', 'Ora', 'Blu', 'Ora', 'Ora', 'Blu', 'Ora', 'Ora']]

O=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel'], 
 ['Ora', 'Gre', 'Ora', 'Gre', 'Gre', 'Gre', 'Gre', 'Gre', 'Gre'], 
 ['Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei'], 
 ['Blu', 'Blu', 'Blu', 'Blu', 'Blu', 'Blu', 'Gre', 'Blu', 'Blu'], 
 ['Rot', 'Rot', 'Rot', 'Rot', 'Rot', 'Rot', 'Gre', 'Rot', 'Rot'], 
 ['Blu', 'Ora', 'Ora', 'Ora', 'Ora', 'Ora', 'Rot', 'Ora', 'Ora']]

g=[['Gre', 'Gel', 'Wei', 'Gre', 'Gre', 'Gre', 'Wei', 'Wei', 'Wei'], 
['Gel', 'Rot', 'Wei', 'Rot', 'Ora', 'Gel', 'Gel', 'Gre', 'Blu'], 
['Rot', 'Rot', 'Blu', 'Ora', 'Blu', 'Gre', 'Gre', 'Blu', 'Rot'], 
['Ora', 'Ora', 'Ora', 'Blu', 'Rot', 'Blu', 'Gel', 'Gel', 'Ora'], 
['Gel', 'Wei', 'Gre', 'Ora', 'Wei', 'Rot', 'Gre', 'Ora', 'Rot'], 
['Ora', 'Wei', 'Rot', 'Blu', 'Gel', 'Wei', 'Blu', 'Gel', 'Blu']]
a=[['Rot', 'Rot', 'Gel', 'Gru', 'Gel', 'Bla', 'Gru', 'Ora', 'Rot'], ['Gel', 'Rot', 'Wei', 'Ora', 'Gru', 'Gru', 'Bla', 'Gru', 'Ora'], ['Gru', 'Rot', 'Rot', 'Ora', 'Wei', 'Wei', 'Ora', 'Bla', 'Ora'], ['Rot', 'Gel', 'Wei', 'Gru', 'Bla', 'Wei', 'Wei', 'Gel', 'Bla'], ['Gel', 'Bla', 'Gru', 'Rot', 'Rot', 'Gel', 'Bla', 'Wei', 'Gru'], ['Bla', 'Wei', 'Wei', 'Bla', 'Ora', 'Gel', 'Ora', 'Ora', 'Gel']]
lil=[['Wei', 'Gel', 'Bla', 'Gel', 'Gel', 'Gel', 'Rot', 'Gel', 'Wei'], ['Bla', 'Gru', 'Wei', 'Wei', 'Gru', 'Gru', 'Gru', 'Gru', 'Gel'], ['Wei', 'Bla', 'Ora', 'Rot', 'Wei', 'Gru', 'Gel', 'Ora', 'Bla'], ['Gel', 'Bla', 'Ora', 'Ora', 'Bla', 'Wei', 'Bla', 'Ora', 'Gru'], ['Gel', 'Rot', 'Gru', 'Rot', 'Rot', 'Rot', 'Rot', 'Wei', 'Rot'], ['Ora', 'Bla', 'Rot', 'Bla', 'Ora', 'Ora', 'Ora', 'Wei', 'Gru']] 
lil2=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel'], ['Wei', 'Rot', 'Gru', 'Ora', 'Gru', 'Bla', 'Gru', 'Gru', 'Gru'], ['Gru', 'Rot', 'Wei', 'Ora', 'Wei', 'Gru', 'Rot', 'Wei', 'Ora'], ['Bla', 'Bla', 'Bla', 'Wei', 'Bla', 'Bla', 'Rot', 'Bla', 'Ora'], ['Bla', 'Ora', 'Rot', 'Rot', 'Rot', 'Rot', 'Wei', 'Wei', 'Rot'], ['Bla', 'Gru', 'Ora', 'Wei', 'Ora', 'Ora', 'Wei', 'Gru', 'Ora']]
lil3=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel'], ['Gru', 'Gru', 'Ora', 'Gru', 'Gru', 'Gru', 'Gru', 'Gru', 'Gru'], ['Rot', 'Rot', 'Wei', 'Wei', 'Wei', 'Bla', 'Wei', 'Wei', 'Bla'], ['Bla', 'Bla', 'Bla', 'Bla', 'Bla', 'Bla', 'Wei', 'Wei', 'Bla'], ['Rot', 'Rot', 'Rot', 'Wei', 'Rot', 'Rot', 'Wei', 'Rot', 'Rot'], ['Ora', 'Ora', 'Ora', 'Ora', 'Ora', 'Ora', 'Gru', 'Ora', 'Ora']]
lil4=[['Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel', 'Gel'], ['Bla', 'Bla', 'Bla', 'Gru', 'Gru', 'Gru', 'Gru', 'Gru', 'Gru'], ['Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei', 'Wei'], ['Bla', 'Bla', 'Bla', 'Bla', 'Bla', 'Bla', 'Ora', 'Rot', 'Rot'], ['Gru', 'Rot', 'Rot', 'Ora', 'Rot', 'Rot', 'Ora', 'Rot', 'Rot'], ['Rot', 'Ora', 'Ora', 'Gru', 'Ora', 'Ora', 'Gru', 'Ora', 'Ora']]
#ecken_f2l(lil)
#kanten_f2l(lil2)
#Oll(lil3)
Pll(lil4)
#Pll(K)
#kanten_f2l(V)
#kanten_f2l(x)
#finde_kanten_V4(x)
Ecken=[((3, 0), (0, 6), (5, 8)), ((3, 2), (0, 8), (4, 2)), ((3, 6), (2, 0), (5, 6)), ((3, 8), (2, 2), (4, 0))]
Ges=['Br', 'Lr', 'Dr', 'B', 'B', 'D', 'L', 'Ur', 'Br', 'U','B', 'B', 'Rr', 'B', 'R', 'B', 'D', 'Br', 'Dr', 'B', 'B', 'Dr', 'B', 'D', 'B', 'L', 'Br', 'Lr', 'U', 'Br', 'Ur', 'Br', 'Lr', 'B', 'L', 'R', 'Br', 'Rr', 'Br', 'Ur', 'B', 'U']
