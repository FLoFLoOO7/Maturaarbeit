def converter(x):
    for i in range(6):
        for z in range(9):
           
            r, g, b = x[i][z]

            # ROT
            if 30 <= r <= 45 and 20 <= g <= 35 and 20 <= b <= 40:
                x[i][z] = "Rot"

            # GRÜN
            elif 5 <= r <= 10 and 30 <= g <= 45 and 60 <= b <= 80:
                x[i][z] = "Gre"

            # BLAU
            elif 3 <= r <= 8 and 15 <= g <= 25 and 50 <= b <= 65:
                x[i][z] = "Blu"

            # ORANGE oder WEISS (b == 100 bei beiden)
            elif b == 100:
                if r + g >= 140:
                    x[i][z] = "Wei"
                else:
                    x[i][z] = "Ora"

            # GELB – fallback
            else:
                x[i][z] = "Gel"

    return x
def converter_V2(x):
    for i in range(len(x)):
        for z in range(len(x[i])):
           
            r, g, b = x[i][z]

            # ROT
            if 30 <= r <= 45 and 20 <= g <= 35 and 20 <= b <= 40:
                x[i][z] = "Rot"

            # GRÜN
            elif 5 <= r <= 10 and 30 <= g <= 45 and 60 <= b <= 80:
                x[i][z] = "Gre"

            # BLAU
            elif 3 <= r <= 8 and 15 <= g <= 25 and 50 <= b <= 65:
                x[i][z] = "Blu"

            # ORANGE oder WEISS (b fast immer 100)
            elif b >= 95:
                if (r + g) >= 125:
                    x[i][z] = "Wei"
                else:
                    x[i][z] = "Ora"

            # Fallback
            else:
                x[i][z] = "Gel"

    return x
def converter_V3(x):
    for i in range(len(x)):
        for z in range(len(x[i])):
            r, g, b = x[i][z]

            # ORANGE / WEISS (erst unterscheiden, weil b≈100 bei beiden)
            if b >= 98:
                x[i][z] = "Wei" if (r + g) >= 125 else "Ora"
                continue
            if b >= 92:  # z.B. (49, 64, 92) => Orange
                x[i][z] = "Ora"
                continue

            # ROT (deine 3. Zeile)
            if 25 <= r <= 35 and 18 <= g <= 28 and 18 <= b <= 32:
                x[i][z] = "Rot"
                continue

            if r >= 20 and g >= 25 and b < 90:
                x[i][z] = "Gel"
                continue

            # GRÜN (deine 5. Zeile)
            if r <= 10 and 25 <= g <= 45 and 58 <= b <= 80:
                x[i][z] = "Gre"
                continue

            # BLAU (deine 6. Zeile)
            if r <= 6 and 12 <= g <= 20 and 45 <= b <= 55:
                x[i][z] = "Blu"
                continue

            x[i][z] = "Unk"

    return x
def converter_V4(x):
    open_pixels = []  # speichert Kandidaten für Orange/Weiß: (r+g, i, z)

    # 1️⃣ erster Durchgang – alle prüfen, Orange/Weiß nur sammeln
    for i in range(len(x)):
        for z in range(len(x[i])):
            r, g, b = x[i][z]

            # Orange/Weiß: b≈100 → später entscheiden
            if b >= 82:
                open_pixels.append((r + g, i, z))
                continue

            # ROT
            # ROT (deine 3. Zeile)
            if 25 <= r <= 35 and 18 <= g <= 28 and 18 <= b <= 32:
                x[i][z] = "Rot"
                continue

            if r >= 20 and g >= 25 and b < 90:
                x[i][z] = "Gel"
                continue

            # GRÜN (deine 5. Zeile)
            if r <= 10 and 25 <= g <= 45 and 58 <= b <= 80:
                x[i][z] = "Gre"
                continue

            # BLAU (deine 6. Zeile)
            if r <= 6 and 12 <= g <= 20 and 45 <= b <= 55:
                x[i][z] = "Blu"
                continue

    # 2️⃣ zweiter Durchgang – Orange/Weiß zuweisen
    # sortiere nach (r+g), die 9 höchsten werden Weiß
    open_pixels.sort(reverse=True)  # höchste zuerst
    for idx, (_, i, z) in enumerate(open_pixels):
        if idx < 9:
            x[i][z] = "Wei"
        else:
            x[i][z] = "Ora"

    return x
def converterV5(x):
    for i in range(len(x)):
        for z in range(len(x[i])):
            r, g, b = x[i][z]

            # 1) WEISS – sehr hell, b ~ 99–100, r & g hoch
            if (b >= 99) and (r >= 40) and (g >= 55):
                x[i][z] = "Wei"
                continue

            # 2) ROT – r dominiert klar, b nicht hoch
            if (r >= g + 5) and (r >= b + 5) and (b <= 45) and (20 <= r <= 50):
                x[i][z] = "Rot"
                continue

            # 3) GELB – (a) sehr dunkel ODER (b) warm mit wenig Blau
            #    plus: (c) b sehr hoch, aber r,g zu niedrig für Weiß -> Gelb
            if (max(r, g, b) <= 12) \
               or (r >= 15 and g >= 20 and b <= 55) \
               or (b >= 90 and r < 35 and g < 45):
                x[i][z] = "Gel"
                continue

            # 4) ORANGE – mittlere Helligkeit, b 56–96, r & g mittel
            if (56 <= b <= 96) and (10 <= r <= 40) and (15 <= g <= 50):
                x[i][z] = "Ora"
                continue

            # 5) GRÜN – g dominant, b 58–80, r klein
            if (r <= 10) and (24 <= g <= 50) and (58 <= b <= 80):
                x[i][z] = "Gre"
                continue

            # 6) BLAU – b dominant im Bereich 30–60, r sehr klein, g klein–mittel
            if (r <= 5) and (7 <= g <= 22) and (30 <= b <= 60):
                x[i][z] = "Blu"
                continue

            # Fallback: nie "Unk" – zu Orange
            x[i][z] = "Ora"

    return x

#x=[[(5, 18, 58), (8, 12, 5), (6, 19, 60), (5, 19, 56), (24, 30, 100), (5, 18, 54), (7, 40, 76), (61, 80, 100), (8, 41, 74)], [(62, 83, 100), (7, 38, 73), (64, 85, 100), (61, 80, 100), (6, 33, 63), (61, 79, 100), (62, 83, 100), (8, 40, 74), (64, 85, 100)], [(5, 18, 59), (24, 28, 27), (6, 19, 58), (7, 38, 75), (11, 12, 33), (7, 39, 72), (7, 40, 76), (61, 81, 100), (8, 41, 73)], [(3, 4, 5), (5, 17, 56), (4, 4, 4), (6, 11, 5), (5, 16, 55), (18, 19, 17), (4, 4, 6), (5, 19, 55), (4, 5, 6)], [(54, 75, 100), (51, 69, 100), (57, 78, 100), (34, 27, 30), (47, 53, 59), (35, 26, 29), (39, 29, 36), (36, 25, 31), (37, 28, 33)], [(54, 74, 100), (51, 68, 100), (57, 77, 100), (47, 63, 100), (49, 62, 100), (48, 67, 100), (39, 29, 35), (37, 27, 32), (38, 28, 38)]]
#y=[[(6, 20, 58), (9, 13, 6), (6, 19, 59), (5, 19, 57), (16, 19, 64), (5, 18, 53), (5, 19, 56), (12, 18, 8), (5, 18, 56)], [(64, 86, 100), (7, 41, 74), (65, 87, 100), (62, 80, 100), (7, 34, 70), (62, 82, 100), (65, 87, 100), (7, 40, 74), (61, 82, 100)], [(8, 41, 75), (61, 81, 100), (8, 42, 76), (8, 38, 72), (59, 72, 100), (7, 39, 73), (8, 41, 76), (60, 77, 100), (7, 39, 72)], [(4, 4, 5), (5, 19, 55), (4, 4, 5), (10, 14, 7), (3, 13, 43), (14, 17, 9), (4, 5, 6), (5, 18, 56), (5, 5, 8)], [(55, 75, 100), (51, 70, 100), (55, 75, 100), (34, 27, 29), (42, 47, 44), (34, 26, 30), (56, 75, 100), (50, 67, 100), (52, 73, 100)], [(39, 30, 36), (37, 26, 31), (40, 29, 36), (47, 64, 100), (38, 38, 100), (47, 65, 100), (39, 29, 35), (36, 26, 32), (38, 28, 36)]]
c=[[(29, 38, 98), (2, 4, 28), (27, 32, 52), (12, 14, 65), (6, 17, 55), (20, 27, 100), (29, 38, 100), (6, 11, 50), (32, 42, 100)], [(6, 29, 67), (3, 4, 20), (7, 35, 72), (1, 4, 20), (62, 70, 100), (3, 15, 48), (4, 18, 50), (7, 14, 49), (7, 29, 72)], [(45, 57, 100), (2, 3, 21), (60, 73, 100), (10, 11, 44), (8, 34, 67), (17, 22, 62), (36, 45, 100), (7, 15, 48), (55, 70, 100)], [(5, 14, 51), (3, 4, 25), (6, 18, 59), (0, 1, 10), (7, 8, 16), (2, 7, 35), (3, 8, 38), (4, 8, 41), (6, 16, 58)], [(29, 23, 32), (17, 24, 82), (30, 22, 30), (5, 3, 16), (45, 52, 96), (12, 8, 17), (22, 16, 27), (5, 5, 21), (16, 12, 22)], [(42, 54, 100), (5, 4, 11), (47, 59, 100), (10, 11, 51), (38, 24, 33), (11, 13, 52), (33, 42, 100), (4, 4, 16), (30, 41, 100)]]
a=[[(47, 56, 100), (12, 16, 60), (27, 38, 94), (35, 42, 100), (41, 54, 100), (8, 10, 42), (47, 59, 100), (36, 45, 100), (37, 47, 100)], [(4, 4, 6), (7, 11, 6), (3, 4, 6), (15, 16, 7), (30, 31, 36), (24, 28, 26), (3, 4, 5), (19, 22, 17), (6, 7, 10)], [(38, 29, 34), (35, 26, 31), (37, 29, 37), (30, 23, 29), (39, 27, 34), (30, 22, 28), (38, 30, 38), (31, 21, 30), (36, 28, 33)], [(60, 80, 100), (57, 78, 100), (59, 79, 100), (56, 71, 100), (66, 80, 100), (57, 74, 100), (63, 83, 100), (55, 69, 100), (60, 79, 100)], [(4, 17, 56), (4, 17, 54), (5, 18, 56), (4, 17, 58), (4, 15, 54), (4, 16, 53), (5, 19, 60), (5, 17, 57), (5, 19, 58)], [(5, 32, 64), (4, 21, 54), (5, 30, 63), (4, 22, 56), (3, 27, 39), (3, 16, 45), (5, 33, 64), (3, 18, 51), (6, 35, 66)]]
d=[[(53, 59, 100), (52, 54, 100), (51, 53, 100), (53, 58, 100), (32, 30, 85), (54, 55, 100), (53, 65, 100), (53, 57, 100), (53, 59, 100)], [(5, 33, 65), (8, 37, 78), (7, 35, 72), (7, 37, 75), (3, 14, 29), (7, 38, 77), (5, 33, 65), (7, 38, 79), (7, 36, 73)], [(40, 24, 31), (38, 24, 35), (42, 25, 38), (42, 27, 38), (26, 11, 18), (40, 24, 36), (40, 26, 29), (38, 24, 37), (41, 25, 38)], [(4, 14, 52), (5, 17, 61), (5, 15, 59), (5, 17, 62), (2, 5, 28), (5, 17, 59), (3, 14, 55), (5, 16, 59), (5, 15, 56)], [(11, 13, 27), (7, 9, 12), (5, 5, 10), (12, 15, 21), (10, 11, 18), (4, 4, 5), (19, 24, 55), (16, 21, 28), (23, 30, 88)], [(63, 73, 100), (64, 75, 100), (62, 72, 100), (64, 75, 100), (31, 30, 53), (63, 73, 100), (62, 70, 100), (62, 73, 100), (61, 70, 100)]]
f=[[(30, 46, 87), (26, 37, 89), (30, 47, 98), (14, 24, 58), (28, 40, 77), (16, 26, 62), (19, 32, 61), (18, 26, 59), (18, 31, 64)], [(63, 83, 100), (46, 58, 100), (63, 82, 100), (43, 56, 100), (63, 70, 100), (45, 58, 100), (60, 82, 100), (47, 60, 100), (60, 80, 100)], [(37, 28, 33), (28, 20, 29), (40, 30, 36), (23, 18, 28), (39, 25, 38), (27, 20, 28), (40, 31, 39), (31, 23, 32), (38, 30, 36)], [(4, 5, 5), (21, 22, 24), (4, 5, 5), (27, 35, 99), (48, 49, 97), (19, 21, 41), (3, 4, 4), (20, 23, 45), (5, 6, 9)], [(7, 40, 76), (7, 35, 74), (7, 39, 78), (5, 28, 70), (7, 36, 77), (6, 29, 71), (7, 41, 74), (5, 24, 66), (7, 40, 75)], [(5, 18, 61), (5, 16, 56), (5, 17, 60), (5, 15, 58), (5, 16, 61), (4, 14, 54), (5, 19, 57), (4, 14, 56), (5, 19, 60)]]
g=[[(6, 31, 64), (19, 24, 68), (47, 65, 100), (9, 26, 64), (10, 29, 68), (0, 15, 46), (59, 77, 100), (29, 37, 84), (48, 68, 100)], [(4, 8, 5), (17, 15, 27), (49, 68, 100), (18, 14, 22), (30, 36, 78), (19, 24, 81), (4, 3, 1), (8, 22, 59), (7, 19, 55)], [(31, 25, 33), (15, 11, 20), (2, 14, 50), (13, 19, 50), (11, 18, 55), (8, 19, 52), (9, 39, 69), (0, 6, 33), (36, 30, 35)], [(16, 28, 58), (10, 20, 63), (28, 40, 75), (0, 9, 44), (40, 41, 42), (2, 9, 39), (0, 3, 1), (20, 24, 52), (12, 25, 47)], [(32, 26, 35), (10, 17, 48), (4, 34, 65), (21, 18, 26), (44, 61, 100), (5, 12, 39), (5, 34, 63), (28, 41, 94), (5, 4, 2)], [(4, 17, 54), (14, 22, 87), (5, 16, 48), (23, 36, 90), (26, 35, 100), (3, 8, 33), (28, 21, 28), (35, 46, 99), (16, 29, 55)]]
converterV5(g)
print(g)