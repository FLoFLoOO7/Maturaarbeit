eck = {

    (0,0): ((5,2),(1,6)),
    (0,2): ((1,8),(4,8)),
    (0,6): ((3,0),(5,8)),
    (0,8): ((4,2),(3,2)),

    (1,0): ((5,0),(2,6)),
    (1,2): ((2,8),(4,6)),
    (1,6): ((0,0),(5,2)),
    (1,8): ((4,8),(0,2)),
    
    (2,0): ((5,6),(3,6)),
    (2,2): ((3,8),(4,0)),
    (2,6): ((1,0),(5,0)),
    (2,8): ((4,6),(1,2)),
    
    (3,0): ((5,8),(0,6)),
    (3,2): ((0,8),(4,2)),
    (3,6): ((2,0),(5,6)),
    (3,8): ((4,0),(2,2)),

    (4,0): ((2,2),(3,8)),
    (4,2): ((3,2),(0,8)),
    (4,6): ((1,2),(2,8)),
    (4,8): ((0,2),(1,8)),

    (5,0): ((2,6),(1,0)),
    (5,2): ((1,6),(0,0)),
    (5,6): ((3,6),(2,0)),
    (5,8): ((3,0),(0,6)),
}
moves_eck0 = {
    ((0,0),(5,2),(1,6)): [],
    ((0,2),(1,8),(4,8)): ['R','D','Fr','Ur','F','Dr','U','Rr','Ur'],
    ((0,6),(3,0),(5,8)): ['U','R','F','R','Fr','R','R','Ur'],
    ((0,8),(4,2),(3,2)): ['U','B','B','Ur','Rr','Br','R'],

    ((1,0),(5,0),(2,6)): ['B','B','Rr','B','B','R'],
    ((1,2),(2,8),(4,6)): ['Br','D','B','B','Dr'],
    ((1,6),(0,0),(5,2)): ['Rr','B','R','B','B','Rr','B','B','R'],
    ((1,8),(4,8),(0,2)): ['L','Br','Lr','B','Rr','Br','R'],
    
    ((2,0),(5,6),(3,6)): ['Br','Rr','B','R','D','B','B','Dr'],
    ((2,2),(3,8),(4,0)): ['Br','Br','Rr','B','R','D','B','B','Dr'],
    ((2,6),(1,0),(5,0)): ['Rr','B','R','D','B','B','Dr'],
    ((2,8),(4,6),(1,2)): ['B','Rr','B','R','D','B','B','Dr'],
    
    ((3,0),(5,8),(0,6)): ['R','Br','Rr','Br','Rr','Br','R'],
    ((3,2),(0,8),(4,2)): ['Lr','B','L','B','B','D','B','Dr'],
    ((3,6),(2,0),(5,6)): ['Br','Rr','Br','R'],
    ((3,8),(4,0),(2,2)): ['B','B','Rr','Br','R'],

    ((4,0),(2,2),(3,8)): ['B','B','Rr','Dr','R'],
    ((4,2),(3,2),(0,8)): ['U','Br','Ur','B','B','Rr','Dr','R'],
    ((4,6),(1,2),(2,8)): ['B','D','B','Dr'],
    ((4,8),(0,2),(1,8)): ['L','B','Lr','D','B','Dr'],

    ((5,0),(2,6),(1,0)): ['Rr','Dr','R'],
    ((5,2),(1,6),(0,0)): ['Rr','Br','R','B','Rr','Br'],
    ((5,6),(3,6),(2,0)): ['Br','D','B','Dr'],
    ((5,8),(3,0),(0,6)): ['R','B','Rr','D','B','Dr'],
}
moves_eck1 = {
    
    ((0,2),(1,8),(4,8)): [],
    ((0,6),(3,0),(5,8)): ['R','B','B','Rr','Dr','Br','D'],
    ((0,8),(4,2),(3,2)): ['Lr','Br','L','B','B','L','B','Lr'],

    ((1,0),(5,0),(2,6)): ['Br','L','B','Lr'],
    ((1,2),(2,8),(4,6)): ['Dr','Br','D'],
    ((1,8),(4,8),(0,2)): ['Dr','B','B','L','B','B'],
    
    ((2,0),(5,6),(3,6)): ['B','B','Dr','Rr','B','B','R','D'],
    ((2,2),(3,8),(4,0)): ['B','Dr','Rr','B','B','R','D'],
    ((2,6),(1,0),(5,0)): ['Br','Dr','Rr','B','B','R','D'],
    ((2,8),(4,6),(1,2)): ['Dr','Rr','B','B','R','D'],
    
    ((3,0),(5,8),(0,6)): ['R','Br','Rr','B','B','Dr','Br','D'],
    ((3,2),(0,8),(4,2)): ['Lr','B','L','B','L','B','Lr'],
    ((3,6),(2,0),(5,6)): ['B','B','Dr','Br','D'],
    ((3,8),(4,0),(2,2)): ['B','L','B','Lr'],

    ((4,0),(2,2),(3,8)): ['B','Dr','Br','D'],
    ((4,2),(3,2),(0,8)): ['U','Br','Ur','B','Dr','Br','D'],
    ((4,6),(1,2),(2,8)): ['L','B','Lr'],
    ((4,8),(0,2),(1,8)): ['L','B','Lr','Br','L','B','Lr'],

    ((5,0),(2,6),(1,0)): ['Br','Dr','Br','D'],
    ((5,6),(3,6),(2,0)): ['B','B','L','B','Lr'],
    ((5,8),(3,0),(0,6)): ['R','B','B','Rr','L','B','Lr'],
}
moves_eck2 = {
    
    ((0,6),(3,0),(5,8)): [],
    ((0,8),(4,2),(3,2)): ['R','B','Rr','Lr','Br','L'],

    ((1,0),(5,0),(2,6)): ['B','B','U','B','Ur'],
    ((1,2),(2,8),(4,6)): ['Br','Lr','Br','L'],
    
    ((2,0),(5,6),(3,6)): ['B','Lr','Dr','B','B','D','Lr'],
    ((2,2),(3,8),(4,0)): ['Lr','Dr','B','B','D','Lr'],
    ((2,6),(1,0),(5,0)): ['B','B','Lr','Dr','B','B','D','Lr'],
    ((2,8),(4,6),(1,2)): ['Br','Lr','Dr','B','B','D','Lr'],
    
    ((3,0),(5,8),(0,6)): ['R','B','Lr','Br','L'],
    ((3,2),(0,8),(4,2)): ['Lr','Br','L','B','U','B','Ur'],
    ((3,6),(2,0),(5,6)): ['B','Lr','Br','L'],
    ((3,8),(4,0),(2,2)): ['U','B','Ur'],

    ((4,0),(2,2),(3,8)): ['Lr','Br','L'],
    ((4,2),(3,2),(0,8)): ['Lr','Br','L','B','Lr','Br','L'],
    ((4,6),(1,2),(2,8)): ['Br','U','B','Ur'],

    ((5,0),(2,6),(1,0)): ['B','B','Lr','Br','L'],
    ((5,6),(3,6),(2,0)): ['B','Lr','Br','L'],
    ((5,8),(3,0),(0,6)): ['R','B','Rr','U','B','Ur'],
}
moves_eck3 = {
    
    ((0,8),(4,2),(3,2)): [],

    ((1,0),(5,0),(2,6)): ['B','R','B','Rr'],
    ((1,2),(2,8),(4,6)): ['B','B','R','B','Rr'],
    
    ((2,0),(5,6),(3,6)): ['R','D','B','B','Dr','Rr'],
    ((2,2),(3,8),(4,0)): ['Br','R','D','B','B','Dr','Rr'],
    ((2,6),(1,0),(5,0)): ['B','R','D','B','B','Dr','Rr'],
    ((2,8),(4,6),(1,2)): ['B','B','R','D','B','B','Dr','Rr'],
    
    ((3,2),(0,8),(4,2)): ['R','Br','Rr','Ur','Br','U'],
    ((3,6),(2,0),(5,6)): ['Ur','Br','U'],
    ((3,8),(4,0),(2,2)): ['Br','R','B','Rr'],

    ((4,0),(2,2),(3,8)): ['Br','Ur','Br','U'],
    ((4,6),(1,2),(2,8)): ['B','B','Ur','Br','U'],

    ((5,0),(2,6),(1,0)): ['B','Ur','Br','U'],
    ((5,6),(3,6),(2,0)): ['R','B','Rr'],
}

kanten_f={
    
    (1,1):(2,7),
    (1,3):(5,1),
    (1,5):(4,7),

    (2,1):(3,7),
    (2,3):(5,3),
    (2,5):(4,3),
    (2,7):(1,1),

    (3,3):(5,7),
    (3,5):(4,1),
    (3,7):(2,1),

    (4,1):(3,5),
    (4,3):(2,5),
    (4,7):(1,5),
    
    (5,1):(1,3),
    (5,3):(2,3),
    (5,7):(3,3),
}
moves_kant0 = {
    ((1,1),(2,7)): [],
    ((1,3),(5,1)): [],
    ((1,5),(4,7)): [],

    ((2,1),(3,7)): [],
    ((2,3),(5,3)): [],
    ((2,5),(4,3)): [],
    ((2,7),(1,1)): [],

    ((3,3),(5,7)): [],
    ((3,5),(4,1)): [],
    ((3,7),(2,1)): [],

    ((4,1),(3,5)): [],
    ((4,3),(2,5)): [],
    ((4,7),(1,5)): [],
    
    ((5,1),(1,3)): [],
    ((5,3),(2,3)): [],
    ((5,7),(3,3)): [],
}

def R(y):
    x=5
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[0][0],y[0][3],y[0][6],  y[1][0],y[1][3],y[1][6], y[2][0],y[2][3],y[2][6], y[3][0],y[3][3],y[3][6]  =y[1][0],y[1][3],y[1][6],y[2][0],y[2][3],y[2][6],y[3][0],y[3][3],y[3][6],y[0][0],y[0][3],y[0][6],
    
    return y
def L(y):
    x=4
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[0][2],y[0][5],y[0][8],  y[1][2],y[1][5],y[1][8], y[2][2],y[2][5],y[2][8], y[3][2],y[3][5],y[3][8]  =  y[3][2],y[3][5],y[3][8], y[0][2],y[0][5],y[0][8],y[1][2],y[1][5],y[1][8], y[2][2],y[2][5],y[2][8], 
   
    return y
def F(y):
    S1=1
    S2=5
    S3=3
    S4=4
    x=0
    y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][5], y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2], y[x][0],y[x][1],y[x][2],y[x][3],y[x][5],y[x][6],  y[x][7],  y[x][8]  =         y[S2][8], y[S2][5], y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2],y[S1][6], y[S1][7],y[S1][8],  y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    
    return y
def B(y):
    S1=1
    S2=5
    S3=3
    S4=4
    x=2
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[S1][0], y[S1][1],y[S1][2],     y[S2][6], y[S2][3], y[S2][0],     y[S3][6], y[S3][7], y[S3][8],     y[S4][6], y[S4][3], y[S4][0]  =     y[S4][6], y[S4][3], y[S4][0]  , y[S1][6], y[S1][7],y[S1][8],     y[S2][6], y[S2][3], y[S2][0],     y[S3][0], y[S3][1], y[S3][2],       
    
    return y
def U(y):
    S1=0
    S2=4
    S3=2
    S4=5
    x=3
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[S1][6], y[S1][7],y[S1][8],     y[S2][0], y[S2][1], y[S2][2],     y[S3][0], y[S3][1], y[S3][2],     y[S4][0], y[S4][1], y[S4][2]  =     y[S4][0], y[S4][1], y[S4][2]     , y[S1][6], y[S1][7],y[S1][8],     y[S2][0], y[S2][1], y[S2][2],     y[S3][0], y[S3][1], y[S3][2],     
    
    return y
def D(y):
    S1=2
    S2=4
    S3=0
    S4=5
    x=1
    y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]=y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]
    y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2],     y[S4][0], y[S4][1], y[S4][2]  =     y[S4][0], y[S4][1], y[S4][2]     , y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2],     
    
    return y

#inverted
def Rr(y):
    x=5
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    
    y[1][0],y[1][3],y[1][6],y[2][0],y[2][3],y[2][6],y[3][0],y[3][3],y[3][6],y[0][0],y[0][3],y[0][6],=y[0][0],y[0][3],y[0][6],  y[1][0],y[1][3],y[1][6], y[2][0],y[2][3],y[2][6], y[3][0],y[3][3],y[3][6]  
    
    return y
def Lr(y):
    x=4
    #1->3 2->6 3->9 4->2 6->8 9->7 7->1 8->4
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[3][2],y[3][5],y[3][8], y[0][2],y[0][5],y[0][8],y[1][2],y[1][5],y[1][8], y[2][2],y[2][5],y[2][8],=y[0][2],y[0][5],y[0][8],  y[1][2],y[1][5],y[1][8], y[2][2],y[2][5],y[2][8], y[3][2],y[3][5],y[3][8]   
   
    return y
def Fr(y):
    S1=1
    S2=5
    S3=3
    S4=4
    x=0
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[S2][8], y[S2][5], y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2],y[S1][6], y[S1][7],y[S1][8],=y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][5], y[S2][2],     y[S3][2], y[S3][1], y[S3][0],     y[S4][8], y[S4][5], y[S4][2]  
    
    return y
def Br(y):
    S1=1
    S2=5
    S3=3
    S4=4
    x=2
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[S4][6], y[S4][3], y[S4][0]  , y[S1][6], y[S1][7],y[S1][8],     y[S2][6], y[S2][3], y[S2][0],     y[S3][0], y[S3][1], y[S3][2],=y[S1][0], y[S1][1],y[S1][2],     y[S2][6], y[S2][3], y[S2][0],     y[S3][6], y[S3][7], y[S3][8],     y[S4][6], y[S4][3], y[S4][0]         
    
    return y
def Ur(y):
    S1=0
    S2=4
    S3=2
    S4=5
    x=3
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[S4][0], y[S4][1], y[S4][2]     , y[S1][6], y[S1][7],y[S1][8],     y[S2][0], y[S2][1], y[S2][2],     y[S3][0], y[S3][1], y[S3][2],     =y[S1][6], y[S1][7],y[S1][8],     y[S2][0], y[S2][1], y[S2][2],     y[S3][0], y[S3][1], y[S3][2],     y[S4][0], y[S4][1], y[S4][2]
    
    return y
def Dr(y):
    S1=2
    S2=4
    S3=0
    S4=5
    x=1
    y[x][2],y[x][5],y[x][8],y[x][1],y[x][7],y[x][0],y[x][3],y[x][6]=y[x][0],y[x][1],y[x][2],  y[x][3],y[x][5],y[x][6],y[x][7],y[x][8]
    y[S4][0], y[S4][1], y[S4][2]     , y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2],=y[S1][6], y[S1][7],y[S1][8],     y[S2][8], y[S2][7], y[S2][6],     y[S3][0], y[S3][1], y[S3][2],     y[S4][0], y[S4][1], y[S4][2]       
    
    return y

def find_eck(x):
    
    ecken=[0,2,6,8]
    weisse_ecken=[]
    for seite in range (6):
        for eck in ecken:
            if x[seite][eck]==x[0][4]:
                weisse_ecken.append([seite,eck])
    return weisse_ecken
def all_ecken(x):
    kanten = find_eck(x)
    kanten_cross = []
    for i in kanten:
        k = tuple(i)
        if k in eck:
            sub = eck[k]
            kanten_cross.append((k, sub[0],sub[1]))
    print(kanten_cross)
    return kanten_cross
def ecken_f2l(x):
    executed = []
    counter = 0

    farben = [x[1][4], x[5][4], x[4][4], x[3][4]]

    move_map = {
        "F": F, "Fr": Fr,
        "R": R, "Rr": Rr,
        "L": L, "Lr": Lr,
        "B": B, "Br": Br,
        "U": U, "Ur": Ur,
        "D": D, "Dr": Dr
    }

    while counter < 4:
        ecken = all_ecken(x)
        print(f"çççççççç{ecken}")
        Ziel = [None, None, None, None]
        for ecke in ecken:
            farbenpaar = {x[ecke[1][0]][ecke[1][1]], x[ecke[2][0]][ecke[2][1]]}
            if farbenpaar == {farben[0], farben[1]} :
                Ziel[0] = ecke
            elif farbenpaar == {farben[0], farben[2]} :
                Ziel[1] = ecke
            elif farbenpaar == {farben[2], farben[3]} :
                Ziel[2] = ecke
            elif farbenpaar == {farben[3], farben[1]}:
                Ziel[3] = ecke
            

        
        print(f"++++{Ziel}")


        if Ziel[counter] is None:
            counter += 1
            continue
        
        kante = Ziel[counter]
        print(f"*********3{kante}")
        if (
            kante[0][0]== 0 and 
            x[kante[0][0]][kante[0][1]] == x[0][4] and  
            x[kante[1][0]][kante[1][1]] == farben[counter]  
        ):
            counter += 1
            continue
        print(kante)

        if counter == 0:
            moves = moves_eck0[kante]
        elif counter == 1:
            moves = moves_eck1[kante]
        elif counter == 2:
            moves = moves_eck2[kante]
        elif counter == 3:
            moves = moves_eck3[kante]
        executed.extend(moves)
        for move in moves:
            x=move_map[move](x)
        
        counter += 1
    print(executed)
    return executed,x


x=[
['Blu', 'Gel', 'Blu', 'Blu', 'Gel', 'Blu', 'Blu', 'Gel', 'Blu'], 
['Wei', 'Gre', 'Wei', 'Wei', 'Gre', 'Wei', 'Wei', 'Gre', 'Wei'], 
['Gre', 'Wei', 'Gre', 'Gre', 'Wei', 'Gre', 'Gre', 'Wei', 'Gre'], 
['Gel', 'Blu', 'Gel', 'Gel', 'Blu', 'Gel', 'Gel', 'Blu', 'Gel'], 
['Ora', 'Ora', 'Ora', 'Rot', 'Rot', 'Rot', 'Ora', 'Ora', 'Ora'], 
['Rot', 'Rot', 'Rot', 'Ora', 'Ora', 'Ora', 'Rot', 'Rot', 'Rot']]



Ecken=[((3, 0), (0, 6), (5, 8)), ((3, 2), (0, 8), (4, 2)), ((3, 6), (2, 0), (5, 6)), ((3, 8), (2, 2), (4, 0))]
ecken_f2l(x)